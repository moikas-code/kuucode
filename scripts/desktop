#!/bin/bash

# Kuucode Desktop App Launcher
# Usage: ./scripts/desktop [command]

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
DESKTOP_DIR="$PROJECT_ROOT/packages/desktop"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[Kuucode Desktop]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[Kuucode Desktop]${NC} $1"
}

print_error() {
    echo -e "${RED}[Kuucode Desktop]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[Kuucode Desktop]${NC} $1"
}

# Check if desktop directory exists
if [ ! -d "$DESKTOP_DIR" ]; then
    print_error "Desktop app directory not found at $DESKTOP_DIR"
    exit 1
fi

# Change to desktop directory
cd "$DESKTOP_DIR"

# Function to check dependencies
check_deps() {
    print_status "Checking dependencies..."
    
    # Check if bun is installed
    if ! command -v bun &> /dev/null; then
        print_error "Bun is not installed. Please install bun first:"
        echo "  curl -fsSL https://bun.sh/install | bash"
        exit 1
    fi
    
    # Check if node_modules exists
    if [ ! -d "node_modules" ]; then
        print_warning "Dependencies not installed. Installing..."
        bun install
    fi
    
    # Check if Rust/Cargo is available for Tauri
    if ! command -v cargo &> /dev/null; then
        print_warning "Rust/Cargo not found. Tauri features may not work."
        print_warning "Install Rust: https://rustup.rs/"
    fi
    
    print_success "Dependencies checked!"
}

# Function to start development server
start_dev() {
    print_status "Starting Kuucode Desktop in development mode..."
    print_status "The app will open at http://localhost:5173"
    print_status "Press Ctrl+C to stop"
    echo ""
    
    # Start the development server
    bun run dev
}

# Function to build the app
build_app() {
    print_status "Building Kuucode Desktop app..."
    
    # Install dependencies if needed
    check_deps
    
    # Build the frontend
    print_status "Building frontend..."
    bun run build
    
    # Build Tauri app if Rust is available
    if command -v cargo &> /dev/null; then
        print_status "Building Tauri desktop app..."
        bun run tauri build
        print_success "Desktop app built successfully!"
        print_status "Check src-tauri/target/release/ for the executable"
    else
        print_warning "Rust not available. Built web version only."
        print_status "Check dist/ for the web build"
    fi
}

# Function to run Tauri dev (native desktop)
start_tauri() {
    print_status "Starting Kuucode Desktop with Tauri (native)..."
    
    if ! command -v cargo &> /dev/null; then
        print_error "Rust/Cargo required for Tauri. Install from https://rustup.rs/"
        exit 1
    fi
    
    check_deps
    print_status "Starting native desktop app..."
    bun run tauri dev
}

# Function to show help
show_help() {
    echo "Kuucode Desktop App Launcher"
    echo ""
    echo "Usage: $0 [command]"
    echo ""
    echo "Commands:"
    echo "  dev, start    Start development server (web version)"
    echo "  tauri         Start native desktop app with Tauri"
    echo "  build         Build the desktop app for production"
    echo "  deps          Check and install dependencies"
    echo "  help          Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0              # Start development server"
    echo "  $0 dev          # Start development server"
    echo "  $0 tauri        # Start native desktop app"
    echo "  $0 build        # Build for production"
    echo ""
}

# Main script logic
case "${1:-dev}" in
    "dev"|"start"|"")
        check_deps
        start_dev
        ;;
    "tauri"|"native")
        start_tauri
        ;;
    "build")
        build_app
        ;;
    "deps"|"install")
        check_deps
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac