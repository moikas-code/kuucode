/*
opencode

opencode API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opencode

import (
	"encoding/json"
)

// checks if the Model type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Model{}

// Model struct for Model
type Model struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	ReleaseDate *string `json:"release_date,omitempty"`
	Attachment *bool `json:"attachment,omitempty"`
	Reasoning *bool `json:"reasoning,omitempty"`
	Temperature *bool `json:"temperature,omitempty"`
	ToolCall *bool `json:"tool_call,omitempty"`
	Cost *ModelCost `json:"cost,omitempty"`
	Limit *ModelLimit `json:"limit,omitempty"`
	Options map[string]interface{} `json:"options,omitempty"`
}

// NewModel instantiates a new Model object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModel() *Model {
	this := Model{}
	return &this
}

// NewModelWithDefaults instantiates a new Model object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelWithDefaults() *Model {
	this := Model{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Model) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Model) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Model) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Model) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Model) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Model) SetName(v string) {
	o.Name = &v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise.
func (o *Model) GetReleaseDate() string {
	if o == nil || IsNil(o.ReleaseDate) {
		var ret string
		return ret
	}
	return *o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model) GetReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseDate) {
		return nil, false
	}
	return o.ReleaseDate, true
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *Model) HasReleaseDate() bool {
	if o != nil && !IsNil(o.ReleaseDate) {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given string and assigns it to the ReleaseDate field.
func (o *Model) SetReleaseDate(v string) {
	o.ReleaseDate = &v
}

// GetAttachment returns the Attachment field value if set, zero value otherwise.
func (o *Model) GetAttachment() bool {
	if o == nil || IsNil(o.Attachment) {
		var ret bool
		return ret
	}
	return *o.Attachment
}

// GetAttachmentOk returns a tuple with the Attachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model) GetAttachmentOk() (*bool, bool) {
	if o == nil || IsNil(o.Attachment) {
		return nil, false
	}
	return o.Attachment, true
}

// HasAttachment returns a boolean if a field has been set.
func (o *Model) HasAttachment() bool {
	if o != nil && !IsNil(o.Attachment) {
		return true
	}

	return false
}

// SetAttachment gets a reference to the given bool and assigns it to the Attachment field.
func (o *Model) SetAttachment(v bool) {
	o.Attachment = &v
}

// GetReasoning returns the Reasoning field value if set, zero value otherwise.
func (o *Model) GetReasoning() bool {
	if o == nil || IsNil(o.Reasoning) {
		var ret bool
		return ret
	}
	return *o.Reasoning
}

// GetReasoningOk returns a tuple with the Reasoning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model) GetReasoningOk() (*bool, bool) {
	if o == nil || IsNil(o.Reasoning) {
		return nil, false
	}
	return o.Reasoning, true
}

// HasReasoning returns a boolean if a field has been set.
func (o *Model) HasReasoning() bool {
	if o != nil && !IsNil(o.Reasoning) {
		return true
	}

	return false
}

// SetReasoning gets a reference to the given bool and assigns it to the Reasoning field.
func (o *Model) SetReasoning(v bool) {
	o.Reasoning = &v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *Model) GetTemperature() bool {
	if o == nil || IsNil(o.Temperature) {
		var ret bool
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model) GetTemperatureOk() (*bool, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *Model) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given bool and assigns it to the Temperature field.
func (o *Model) SetTemperature(v bool) {
	o.Temperature = &v
}

// GetToolCall returns the ToolCall field value if set, zero value otherwise.
func (o *Model) GetToolCall() bool {
	if o == nil || IsNil(o.ToolCall) {
		var ret bool
		return ret
	}
	return *o.ToolCall
}

// GetToolCallOk returns a tuple with the ToolCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model) GetToolCallOk() (*bool, bool) {
	if o == nil || IsNil(o.ToolCall) {
		return nil, false
	}
	return o.ToolCall, true
}

// HasToolCall returns a boolean if a field has been set.
func (o *Model) HasToolCall() bool {
	if o != nil && !IsNil(o.ToolCall) {
		return true
	}

	return false
}

// SetToolCall gets a reference to the given bool and assigns it to the ToolCall field.
func (o *Model) SetToolCall(v bool) {
	o.ToolCall = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *Model) GetCost() ModelCost {
	if o == nil || IsNil(o.Cost) {
		var ret ModelCost
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model) GetCostOk() (*ModelCost, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *Model) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given ModelCost and assigns it to the Cost field.
func (o *Model) SetCost(v ModelCost) {
	o.Cost = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *Model) GetLimit() ModelLimit {
	if o == nil || IsNil(o.Limit) {
		var ret ModelLimit
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model) GetLimitOk() (*ModelLimit, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *Model) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given ModelLimit and assigns it to the Limit field.
func (o *Model) SetLimit(v ModelLimit) {
	o.Limit = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Model) GetOptions() map[string]interface{} {
	if o == nil || IsNil(o.Options) {
		var ret map[string]interface{}
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Model) GetOptionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Options) {
		return map[string]interface{}{}, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Model) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]interface{} and assigns it to the Options field.
func (o *Model) SetOptions(v map[string]interface{}) {
	o.Options = v
}

func (o Model) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Model) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ReleaseDate) {
		toSerialize["release_date"] = o.ReleaseDate
	}
	if !IsNil(o.Attachment) {
		toSerialize["attachment"] = o.Attachment
	}
	if !IsNil(o.Reasoning) {
		toSerialize["reasoning"] = o.Reasoning
	}
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	if !IsNil(o.ToolCall) {
		toSerialize["tool_call"] = o.ToolCall
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableModel struct {
	value *Model
	isSet bool
}

func (v NullableModel) Get() *Model {
	return v.value
}

func (v *NullableModel) Set(val *Model) {
	v.value = val
	v.isSet = true
}

func (v NullableModel) IsSet() bool {
	return v.isSet
}

func (v *NullableModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModel(val *Model) *NullableModel {
	return &NullableModel{value: val, isSet: true}
}

func (v NullableModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
