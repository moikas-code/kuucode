/*
opencode

opencode API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opencode

import (
	"encoding/json"
)

// checks if the SendMessageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendMessageRequest{}

// SendMessageRequest struct for SendMessageRequest
type SendMessageRequest struct {
	Text *string `json:"text,omitempty"`
	Files []SendMessageRequestFilesInner `json:"files,omitempty"`
}

// NewSendMessageRequest instantiates a new SendMessageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendMessageRequest() *SendMessageRequest {
	this := SendMessageRequest{}
	return &this
}

// NewSendMessageRequestWithDefaults instantiates a new SendMessageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendMessageRequestWithDefaults() *SendMessageRequest {
	this := SendMessageRequest{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *SendMessageRequest) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendMessageRequest) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *SendMessageRequest) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *SendMessageRequest) SetText(v string) {
	o.Text = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *SendMessageRequest) GetFiles() []SendMessageRequestFilesInner {
	if o == nil || IsNil(o.Files) {
		var ret []SendMessageRequestFilesInner
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendMessageRequest) GetFilesOk() ([]SendMessageRequestFilesInner, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *SendMessageRequest) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []SendMessageRequestFilesInner and assigns it to the Files field.
func (o *SendMessageRequest) SetFiles(v []SendMessageRequestFilesInner) {
	o.Files = v
}

func (o SendMessageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendMessageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	return toSerialize, nil
}

type NullableSendMessageRequest struct {
	value *SendMessageRequest
	isSet bool
}

func (v NullableSendMessageRequest) Get() *SendMessageRequest {
	return v.value
}

func (v *NullableSendMessageRequest) Set(val *SendMessageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSendMessageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSendMessageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendMessageRequest(val *SendMessageRequest) *NullableSendMessageRequest {
	return &NullableSendMessageRequest{value: val, isSet: true}
}

func (v NullableSendMessageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendMessageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
