/*
opencode

opencode API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opencode

import (
	"encoding/json"
)

// checks if the AppPath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppPath{}

// AppPath struct for AppPath
type AppPath struct {
	Config *string `json:"config,omitempty"`
	Data *string `json:"data,omitempty"`
	Root *string `json:"root,omitempty"`
	Cwd *string `json:"cwd,omitempty"`
	State *string `json:"state,omitempty"`
}

// NewAppPath instantiates a new AppPath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppPath() *AppPath {
	this := AppPath{}
	return &this
}

// NewAppPathWithDefaults instantiates a new AppPath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppPathWithDefaults() *AppPath {
	this := AppPath{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *AppPath) GetConfig() string {
	if o == nil || IsNil(o.Config) {
		var ret string
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppPath) GetConfigOk() (*string, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *AppPath) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given string and assigns it to the Config field.
func (o *AppPath) SetConfig(v string) {
	o.Config = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *AppPath) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppPath) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *AppPath) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *AppPath) SetData(v string) {
	o.Data = &v
}

// GetRoot returns the Root field value if set, zero value otherwise.
func (o *AppPath) GetRoot() string {
	if o == nil || IsNil(o.Root) {
		var ret string
		return ret
	}
	return *o.Root
}

// GetRootOk returns a tuple with the Root field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppPath) GetRootOk() (*string, bool) {
	if o == nil || IsNil(o.Root) {
		return nil, false
	}
	return o.Root, true
}

// HasRoot returns a boolean if a field has been set.
func (o *AppPath) HasRoot() bool {
	if o != nil && !IsNil(o.Root) {
		return true
	}

	return false
}

// SetRoot gets a reference to the given string and assigns it to the Root field.
func (o *AppPath) SetRoot(v string) {
	o.Root = &v
}

// GetCwd returns the Cwd field value if set, zero value otherwise.
func (o *AppPath) GetCwd() string {
	if o == nil || IsNil(o.Cwd) {
		var ret string
		return ret
	}
	return *o.Cwd
}

// GetCwdOk returns a tuple with the Cwd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppPath) GetCwdOk() (*string, bool) {
	if o == nil || IsNil(o.Cwd) {
		return nil, false
	}
	return o.Cwd, true
}

// HasCwd returns a boolean if a field has been set.
func (o *AppPath) HasCwd() bool {
	if o != nil && !IsNil(o.Cwd) {
		return true
	}

	return false
}

// SetCwd gets a reference to the given string and assigns it to the Cwd field.
func (o *AppPath) SetCwd(v string) {
	o.Cwd = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *AppPath) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppPath) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *AppPath) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *AppPath) SetState(v string) {
	o.State = &v
}

func (o AppPath) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppPath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Root) {
		toSerialize["root"] = o.Root
	}
	if !IsNil(o.Cwd) {
		toSerialize["cwd"] = o.Cwd
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableAppPath struct {
	value *AppPath
	isSet bool
}

func (v NullableAppPath) Get() *AppPath {
	return v.value
}

func (v *NullableAppPath) Set(val *AppPath) {
	v.value = val
	v.isSet = true
}

func (v NullableAppPath) IsSet() bool {
	return v.isSet
}

func (v *NullableAppPath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppPath(val *AppPath) *NullableAppPath {
	return &NullableAppPath{value: val, isSet: true}
}

func (v NullableAppPath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppPath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
