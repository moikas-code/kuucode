/*
opencode

opencode API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opencode

import (
	"encoding/json"
)

// checks if the Provider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Provider{}

// Provider struct for Provider
type Provider struct {
	Api *string `json:"api,omitempty"`
	Name *string `json:"name,omitempty"`
	Env []string `json:"env,omitempty"`
	Id *string `json:"id,omitempty"`
	Npm *string `json:"npm,omitempty"`
	Models *map[string]Model `json:"models,omitempty"`
}

// NewProvider instantiates a new Provider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvider() *Provider {
	this := Provider{}
	return &this
}

// NewProviderWithDefaults instantiates a new Provider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderWithDefaults() *Provider {
	this := Provider{}
	return &this
}

// GetApi returns the Api field value if set, zero value otherwise.
func (o *Provider) GetApi() string {
	if o == nil || IsNil(o.Api) {
		var ret string
		return ret
	}
	return *o.Api
}

// GetApiOk returns a tuple with the Api field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetApiOk() (*string, bool) {
	if o == nil || IsNil(o.Api) {
		return nil, false
	}
	return o.Api, true
}

// HasApi returns a boolean if a field has been set.
func (o *Provider) HasApi() bool {
	if o != nil && !IsNil(o.Api) {
		return true
	}

	return false
}

// SetApi gets a reference to the given string and assigns it to the Api field.
func (o *Provider) SetApi(v string) {
	o.Api = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Provider) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Provider) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Provider) SetName(v string) {
	o.Name = &v
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *Provider) GetEnv() []string {
	if o == nil || IsNil(o.Env) {
		var ret []string
		return ret
	}
	return o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetEnvOk() ([]string, bool) {
	if o == nil || IsNil(o.Env) {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *Provider) HasEnv() bool {
	if o != nil && !IsNil(o.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given []string and assigns it to the Env field.
func (o *Provider) SetEnv(v []string) {
	o.Env = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Provider) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Provider) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Provider) SetId(v string) {
	o.Id = &v
}

// GetNpm returns the Npm field value if set, zero value otherwise.
func (o *Provider) GetNpm() string {
	if o == nil || IsNil(o.Npm) {
		var ret string
		return ret
	}
	return *o.Npm
}

// GetNpmOk returns a tuple with the Npm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetNpmOk() (*string, bool) {
	if o == nil || IsNil(o.Npm) {
		return nil, false
	}
	return o.Npm, true
}

// HasNpm returns a boolean if a field has been set.
func (o *Provider) HasNpm() bool {
	if o != nil && !IsNil(o.Npm) {
		return true
	}

	return false
}

// SetNpm gets a reference to the given string and assigns it to the Npm field.
func (o *Provider) SetNpm(v string) {
	o.Npm = &v
}

// GetModels returns the Models field value if set, zero value otherwise.
func (o *Provider) GetModels() map[string]Model {
	if o == nil || IsNil(o.Models) {
		var ret map[string]Model
		return ret
	}
	return *o.Models
}

// GetModelsOk returns a tuple with the Models field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetModelsOk() (*map[string]Model, bool) {
	if o == nil || IsNil(o.Models) {
		return nil, false
	}
	return o.Models, true
}

// HasModels returns a boolean if a field has been set.
func (o *Provider) HasModels() bool {
	if o != nil && !IsNil(o.Models) {
		return true
	}

	return false
}

// SetModels gets a reference to the given map[string]Model and assigns it to the Models field.
func (o *Provider) SetModels(v map[string]Model) {
	o.Models = &v
}

func (o Provider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Provider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Api) {
		toSerialize["api"] = o.Api
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Env) {
		toSerialize["env"] = o.Env
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Npm) {
		toSerialize["npm"] = o.Npm
	}
	if !IsNil(o.Models) {
		toSerialize["models"] = o.Models
	}
	return toSerialize, nil
}

type NullableProvider struct {
	value *Provider
	isSet bool
}

func (v NullableProvider) Get() *Provider {
	return v.value
}

func (v *NullableProvider) Set(val *Provider) {
	v.value = val
	v.isSet = true
}

func (v NullableProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvider(val *Provider) *NullableProvider {
	return &NullableProvider{value: val, isSet: true}
}

func (v NullableProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
