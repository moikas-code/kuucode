/*
opencode

opencode API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opencode

import (
	"encoding/json"
)

// checks if the ModelCost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelCost{}

// ModelCost struct for ModelCost
type ModelCost struct {
	Input *float32 `json:"input,omitempty"`
	Output *float32 `json:"output,omitempty"`
	CacheRead *float32 `json:"cache_read,omitempty"`
	CacheWrite *float32 `json:"cache_write,omitempty"`
}

// NewModelCost instantiates a new ModelCost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelCost() *ModelCost {
	this := ModelCost{}
	return &this
}

// NewModelCostWithDefaults instantiates a new ModelCost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelCostWithDefaults() *ModelCost {
	this := ModelCost{}
	return &this
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *ModelCost) GetInput() float32 {
	if o == nil || IsNil(o.Input) {
		var ret float32
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCost) GetInputOk() (*float32, bool) {
	if o == nil || IsNil(o.Input) {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *ModelCost) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given float32 and assigns it to the Input field.
func (o *ModelCost) SetInput(v float32) {
	o.Input = &v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *ModelCost) GetOutput() float32 {
	if o == nil || IsNil(o.Output) {
		var ret float32
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCost) GetOutputOk() (*float32, bool) {
	if o == nil || IsNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *ModelCost) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given float32 and assigns it to the Output field.
func (o *ModelCost) SetOutput(v float32) {
	o.Output = &v
}

// GetCacheRead returns the CacheRead field value if set, zero value otherwise.
func (o *ModelCost) GetCacheRead() float32 {
	if o == nil || IsNil(o.CacheRead) {
		var ret float32
		return ret
	}
	return *o.CacheRead
}

// GetCacheReadOk returns a tuple with the CacheRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCost) GetCacheReadOk() (*float32, bool) {
	if o == nil || IsNil(o.CacheRead) {
		return nil, false
	}
	return o.CacheRead, true
}

// HasCacheRead returns a boolean if a field has been set.
func (o *ModelCost) HasCacheRead() bool {
	if o != nil && !IsNil(o.CacheRead) {
		return true
	}

	return false
}

// SetCacheRead gets a reference to the given float32 and assigns it to the CacheRead field.
func (o *ModelCost) SetCacheRead(v float32) {
	o.CacheRead = &v
}

// GetCacheWrite returns the CacheWrite field value if set, zero value otherwise.
func (o *ModelCost) GetCacheWrite() float32 {
	if o == nil || IsNil(o.CacheWrite) {
		var ret float32
		return ret
	}
	return *o.CacheWrite
}

// GetCacheWriteOk returns a tuple with the CacheWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCost) GetCacheWriteOk() (*float32, bool) {
	if o == nil || IsNil(o.CacheWrite) {
		return nil, false
	}
	return o.CacheWrite, true
}

// HasCacheWrite returns a boolean if a field has been set.
func (o *ModelCost) HasCacheWrite() bool {
	if o != nil && !IsNil(o.CacheWrite) {
		return true
	}

	return false
}

// SetCacheWrite gets a reference to the given float32 and assigns it to the CacheWrite field.
func (o *ModelCost) SetCacheWrite(v float32) {
	o.CacheWrite = &v
}

func (o ModelCost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelCost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	if !IsNil(o.CacheRead) {
		toSerialize["cache_read"] = o.CacheRead
	}
	if !IsNil(o.CacheWrite) {
		toSerialize["cache_write"] = o.CacheWrite
	}
	return toSerialize, nil
}

type NullableModelCost struct {
	value *ModelCost
	isSet bool
}

func (v NullableModelCost) Get() *ModelCost {
	return v.value
}

func (v *NullableModelCost) Set(val *ModelCost) {
	v.value = val
	v.isSet = true
}

func (v NullableModelCost) IsSet() bool {
	return v.isSet
}

func (v *NullableModelCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelCost(val *ModelCost) *NullableModelCost {
	return &NullableModelCost{value: val, isSet: true}
}

func (v NullableModelCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
