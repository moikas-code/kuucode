/*
opencode

opencode API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opencode

import (
	"encoding/json"
)

// checks if the ModelLimit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelLimit{}

// ModelLimit struct for ModelLimit
type ModelLimit struct {
	Context *float32 `json:"context,omitempty"`
	Output *float32 `json:"output,omitempty"`
}

// NewModelLimit instantiates a new ModelLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelLimit() *ModelLimit {
	this := ModelLimit{}
	return &this
}

// NewModelLimitWithDefaults instantiates a new ModelLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelLimitWithDefaults() *ModelLimit {
	this := ModelLimit{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ModelLimit) GetContext() float32 {
	if o == nil || IsNil(o.Context) {
		var ret float32
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLimit) GetContextOk() (*float32, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ModelLimit) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given float32 and assigns it to the Context field.
func (o *ModelLimit) SetContext(v float32) {
	o.Context = &v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *ModelLimit) GetOutput() float32 {
	if o == nil || IsNil(o.Output) {
		var ret float32
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLimit) GetOutputOk() (*float32, bool) {
	if o == nil || IsNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *ModelLimit) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given float32 and assigns it to the Output field.
func (o *ModelLimit) SetOutput(v float32) {
	o.Output = &v
}

func (o ModelLimit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelLimit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	return toSerialize, nil
}

type NullableModelLimit struct {
	value *ModelLimit
	isSet bool
}

func (v NullableModelLimit) Get() *ModelLimit {
	return v.value
}

func (v *NullableModelLimit) Set(val *ModelLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableModelLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableModelLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelLimit(val *ModelLimit) *NullableModelLimit {
	return &NullableModelLimit{value: val, isSet: true}
}

func (v NullableModelLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
