/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ToolState - struct for ToolState
type ToolState struct {
	ToolStateCompleted *ToolStateCompleted
	ToolStateError *ToolStateError
	ToolStatePending *ToolStatePending
	ToolStateRunning *ToolStateRunning
}

// ToolStateCompletedAsToolState is a convenience function that returns ToolStateCompleted wrapped in ToolState
func ToolStateCompletedAsToolState(v *ToolStateCompleted) ToolState {
	return ToolState{
		ToolStateCompleted: v,
	}
}

// ToolStateErrorAsToolState is a convenience function that returns ToolStateError wrapped in ToolState
func ToolStateErrorAsToolState(v *ToolStateError) ToolState {
	return ToolState{
		ToolStateError: v,
	}
}

// ToolStatePendingAsToolState is a convenience function that returns ToolStatePending wrapped in ToolState
func ToolStatePendingAsToolState(v *ToolStatePending) ToolState {
	return ToolState{
		ToolStatePending: v,
	}
}

// ToolStateRunningAsToolState is a convenience function that returns ToolStateRunning wrapped in ToolState
func ToolStateRunningAsToolState(v *ToolStateRunning) ToolState {
	return ToolState{
		ToolStateRunning: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ToolState) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ToolStateCompleted
	err = newStrictDecoder(data).Decode(&dst.ToolStateCompleted)
	if err == nil {
		jsonToolStateCompleted, _ := json.Marshal(dst.ToolStateCompleted)
		if string(jsonToolStateCompleted) == "{}" { // empty struct
			dst.ToolStateCompleted = nil
		} else {
			if err = validator.Validate(dst.ToolStateCompleted); err != nil {
				dst.ToolStateCompleted = nil
			} else {
				match++
			}
		}
	} else {
		dst.ToolStateCompleted = nil
	}

	// try to unmarshal data into ToolStateError
	err = newStrictDecoder(data).Decode(&dst.ToolStateError)
	if err == nil {
		jsonToolStateError, _ := json.Marshal(dst.ToolStateError)
		if string(jsonToolStateError) == "{}" { // empty struct
			dst.ToolStateError = nil
		} else {
			if err = validator.Validate(dst.ToolStateError); err != nil {
				dst.ToolStateError = nil
			} else {
				match++
			}
		}
	} else {
		dst.ToolStateError = nil
	}

	// try to unmarshal data into ToolStatePending
	err = newStrictDecoder(data).Decode(&dst.ToolStatePending)
	if err == nil {
		jsonToolStatePending, _ := json.Marshal(dst.ToolStatePending)
		if string(jsonToolStatePending) == "{}" { // empty struct
			dst.ToolStatePending = nil
		} else {
			if err = validator.Validate(dst.ToolStatePending); err != nil {
				dst.ToolStatePending = nil
			} else {
				match++
			}
		}
	} else {
		dst.ToolStatePending = nil
	}

	// try to unmarshal data into ToolStateRunning
	err = newStrictDecoder(data).Decode(&dst.ToolStateRunning)
	if err == nil {
		jsonToolStateRunning, _ := json.Marshal(dst.ToolStateRunning)
		if string(jsonToolStateRunning) == "{}" { // empty struct
			dst.ToolStateRunning = nil
		} else {
			if err = validator.Validate(dst.ToolStateRunning); err != nil {
				dst.ToolStateRunning = nil
			} else {
				match++
			}
		}
	} else {
		dst.ToolStateRunning = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ToolStateCompleted = nil
		dst.ToolStateError = nil
		dst.ToolStatePending = nil
		dst.ToolStateRunning = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ToolState)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ToolState)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ToolState) MarshalJSON() ([]byte, error) {
	if src.ToolStateCompleted != nil {
		return json.Marshal(&src.ToolStateCompleted)
	}

	if src.ToolStateError != nil {
		return json.Marshal(&src.ToolStateError)
	}

	if src.ToolStatePending != nil {
		return json.Marshal(&src.ToolStatePending)
	}

	if src.ToolStateRunning != nil {
		return json.Marshal(&src.ToolStateRunning)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ToolState) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ToolStateCompleted != nil {
		return obj.ToolStateCompleted
	}

	if obj.ToolStateError != nil {
		return obj.ToolStateError
	}

	if obj.ToolStatePending != nil {
		return obj.ToolStatePending
	}

	if obj.ToolStateRunning != nil {
		return obj.ToolStateRunning
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ToolState) GetActualInstanceValue() (interface{}) {
	if obj.ToolStateCompleted != nil {
		return *obj.ToolStateCompleted
	}

	if obj.ToolStateError != nil {
		return *obj.ToolStateError
	}

	if obj.ToolStatePending != nil {
		return *obj.ToolStatePending
	}

	if obj.ToolStateRunning != nil {
		return *obj.ToolStateRunning
	}

	// all schemas are nil
	return nil
}

type NullableToolState struct {
	value *ToolState
	isSet bool
}

func (v NullableToolState) Get() *ToolState {
	return v.value
}

func (v *NullableToolState) Set(val *ToolState) {
	v.value = val
	v.isSet = true
}

func (v NullableToolState) IsSet() bool {
	return v.isSet
}

func (v *NullableToolState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolState(val *ToolState) *NullableToolState {
	return &NullableToolState{value: val, isSet: true}
}

func (v NullableToolState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


