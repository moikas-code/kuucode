/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserMessage{}

// UserMessage struct for UserMessage
type UserMessage struct {
	Id string `json:"id"`
	SessionID string `json:"sessionID"`
	Role string `json:"role"`
	Time PermissionInfoTime `json:"time"`
}

type _UserMessage UserMessage

// NewUserMessage instantiates a new UserMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserMessage(id string, sessionID string, role string, time PermissionInfoTime) *UserMessage {
	this := UserMessage{}
	this.Id = id
	this.SessionID = sessionID
	this.Role = role
	this.Time = time
	return &this
}

// NewUserMessageWithDefaults instantiates a new UserMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserMessageWithDefaults() *UserMessage {
	this := UserMessage{}
	return &this
}

// GetId returns the Id field value
func (o *UserMessage) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserMessage) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserMessage) SetId(v string) {
	o.Id = v
}

// GetSessionID returns the SessionID field value
func (o *UserMessage) GetSessionID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionID
}

// GetSessionIDOk returns a tuple with the SessionID field value
// and a boolean to check if the value has been set.
func (o *UserMessage) GetSessionIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionID, true
}

// SetSessionID sets field value
func (o *UserMessage) SetSessionID(v string) {
	o.SessionID = v
}

// GetRole returns the Role field value
func (o *UserMessage) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *UserMessage) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *UserMessage) SetRole(v string) {
	o.Role = v
}

// GetTime returns the Time field value
func (o *UserMessage) GetTime() PermissionInfoTime {
	if o == nil {
		var ret PermissionInfoTime
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *UserMessage) GetTimeOk() (*PermissionInfoTime, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *UserMessage) SetTime(v PermissionInfoTime) {
	o.Time = v
}

func (o UserMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["sessionID"] = o.SessionID
	toSerialize["role"] = o.Role
	toSerialize["time"] = o.Time
	return toSerialize, nil
}

func (o *UserMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"sessionID",
		"role",
		"time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserMessage := _UserMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserMessage)

	if err != nil {
		return err
	}

	*o = UserMessage(varUserMessage)

	return err
}

type NullableUserMessage struct {
	value *UserMessage
	isSet bool
}

func (v NullableUserMessage) Get() *UserMessage {
	return v.value
}

func (v *NullableUserMessage) Set(val *UserMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableUserMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableUserMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserMessage(val *UserMessage) *NullableUserMessage {
	return &NullableUserMessage{value: val, isSet: true}
}

func (v NullableUserMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


