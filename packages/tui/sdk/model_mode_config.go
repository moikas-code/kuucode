/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
)

// checks if the ModeConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModeConfig{}

// ModeConfig struct for ModeConfig
type ModeConfig struct {
	Model *string `json:"model,omitempty"`
	Prompt *string `json:"prompt,omitempty"`
	Tools *map[string]bool `json:"tools,omitempty"`
}

// NewModeConfig instantiates a new ModeConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModeConfig() *ModeConfig {
	this := ModeConfig{}
	return &this
}

// NewModeConfigWithDefaults instantiates a new ModeConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModeConfigWithDefaults() *ModeConfig {
	this := ModeConfig{}
	return &this
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *ModeConfig) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModeConfig) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *ModeConfig) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *ModeConfig) SetModel(v string) {
	o.Model = &v
}

// GetPrompt returns the Prompt field value if set, zero value otherwise.
func (o *ModeConfig) GetPrompt() string {
	if o == nil || IsNil(o.Prompt) {
		var ret string
		return ret
	}
	return *o.Prompt
}

// GetPromptOk returns a tuple with the Prompt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModeConfig) GetPromptOk() (*string, bool) {
	if o == nil || IsNil(o.Prompt) {
		return nil, false
	}
	return o.Prompt, true
}

// HasPrompt returns a boolean if a field has been set.
func (o *ModeConfig) HasPrompt() bool {
	if o != nil && !IsNil(o.Prompt) {
		return true
	}

	return false
}

// SetPrompt gets a reference to the given string and assigns it to the Prompt field.
func (o *ModeConfig) SetPrompt(v string) {
	o.Prompt = &v
}

// GetTools returns the Tools field value if set, zero value otherwise.
func (o *ModeConfig) GetTools() map[string]bool {
	if o == nil || IsNil(o.Tools) {
		var ret map[string]bool
		return ret
	}
	return *o.Tools
}

// GetToolsOk returns a tuple with the Tools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModeConfig) GetToolsOk() (*map[string]bool, bool) {
	if o == nil || IsNil(o.Tools) {
		return nil, false
	}
	return o.Tools, true
}

// HasTools returns a boolean if a field has been set.
func (o *ModeConfig) HasTools() bool {
	if o != nil && !IsNil(o.Tools) {
		return true
	}

	return false
}

// SetTools gets a reference to the given map[string]bool and assigns it to the Tools field.
func (o *ModeConfig) SetTools(v map[string]bool) {
	o.Tools = &v
}

func (o ModeConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModeConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Prompt) {
		toSerialize["prompt"] = o.Prompt
	}
	if !IsNil(o.Tools) {
		toSerialize["tools"] = o.Tools
	}
	return toSerialize, nil
}

type NullableModeConfig struct {
	value *ModeConfig
	isSet bool
}

func (v NullableModeConfig) Get() *ModeConfig {
	return v.value
}

func (v *NullableModeConfig) Set(val *ModeConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableModeConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableModeConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModeConfig(val *ModeConfig) *NullableModeConfig {
	return &NullableModeConfig{value: val, isSet: true}
}

func (v NullableModeConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModeConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


