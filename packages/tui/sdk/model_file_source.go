/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FileSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileSource{}

// FileSource struct for FileSource
type FileSource struct {
	Text FilePartSourceText `json:"text"`
	Type string `json:"type"`
	Path string `json:"path"`
}

type _FileSource FileSource

// NewFileSource instantiates a new FileSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileSource(text FilePartSourceText, type_ string, path string) *FileSource {
	this := FileSource{}
	this.Text = text
	this.Type = type_
	this.Path = path
	return &this
}

// NewFileSourceWithDefaults instantiates a new FileSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileSourceWithDefaults() *FileSource {
	this := FileSource{}
	return &this
}

// GetText returns the Text field value
func (o *FileSource) GetText() FilePartSourceText {
	if o == nil {
		var ret FilePartSourceText
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *FileSource) GetTextOk() (*FilePartSourceText, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *FileSource) SetText(v FilePartSourceText) {
	o.Text = v
}

// GetType returns the Type field value
func (o *FileSource) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FileSource) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FileSource) SetType(v string) {
	o.Type = v
}

// GetPath returns the Path field value
func (o *FileSource) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *FileSource) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *FileSource) SetPath(v string) {
	o.Path = v
}

func (o FileSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	toSerialize["type"] = o.Type
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *FileSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
		"type",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileSource := _FileSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFileSource)

	if err != nil {
		return err
	}

	*o = FileSource(varFileSource)

	return err
}

type NullableFileSource struct {
	value *FileSource
	isSet bool
}

func (v NullableFileSource) Get() *FileSource {
	return v.value
}

func (v *NullableFileSource) Set(val *FileSource) {
	v.value = val
	v.isSet = true
}

func (v NullableFileSource) IsSet() bool {
	return v.isSet
}

func (v *NullableFileSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileSource(val *FileSource) *NullableFileSource {
	return &NullableFileSource{value: val, isSet: true}
}

func (v NullableFileSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


