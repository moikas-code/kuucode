/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssistantMessageTokensCache type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssistantMessageTokensCache{}

// AssistantMessageTokensCache struct for AssistantMessageTokensCache
type AssistantMessageTokensCache struct {
	Read float32 `json:"read"`
	Write float32 `json:"write"`
}

type _AssistantMessageTokensCache AssistantMessageTokensCache

// NewAssistantMessageTokensCache instantiates a new AssistantMessageTokensCache object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssistantMessageTokensCache(read float32, write float32) *AssistantMessageTokensCache {
	this := AssistantMessageTokensCache{}
	this.Read = read
	this.Write = write
	return &this
}

// NewAssistantMessageTokensCacheWithDefaults instantiates a new AssistantMessageTokensCache object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssistantMessageTokensCacheWithDefaults() *AssistantMessageTokensCache {
	this := AssistantMessageTokensCache{}
	return &this
}

// GetRead returns the Read field value
func (o *AssistantMessageTokensCache) GetRead() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Read
}

// GetReadOk returns a tuple with the Read field value
// and a boolean to check if the value has been set.
func (o *AssistantMessageTokensCache) GetReadOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Read, true
}

// SetRead sets field value
func (o *AssistantMessageTokensCache) SetRead(v float32) {
	o.Read = v
}

// GetWrite returns the Write field value
func (o *AssistantMessageTokensCache) GetWrite() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Write
}

// GetWriteOk returns a tuple with the Write field value
// and a boolean to check if the value has been set.
func (o *AssistantMessageTokensCache) GetWriteOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Write, true
}

// SetWrite sets field value
func (o *AssistantMessageTokensCache) SetWrite(v float32) {
	o.Write = v
}

func (o AssistantMessageTokensCache) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssistantMessageTokensCache) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["read"] = o.Read
	toSerialize["write"] = o.Write
	return toSerialize, nil
}

func (o *AssistantMessageTokensCache) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"read",
		"write",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssistantMessageTokensCache := _AssistantMessageTokensCache{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssistantMessageTokensCache)

	if err != nil {
		return err
	}

	*o = AssistantMessageTokensCache(varAssistantMessageTokensCache)

	return err
}

type NullableAssistantMessageTokensCache struct {
	value *AssistantMessageTokensCache
	isSet bool
}

func (v NullableAssistantMessageTokensCache) Get() *AssistantMessageTokensCache {
	return v.value
}

func (v *NullableAssistantMessageTokensCache) Set(val *AssistantMessageTokensCache) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantMessageTokensCache) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantMessageTokensCache) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantMessageTokensCache(val *AssistantMessageTokensCache) *NullableAssistantMessageTokensCache {
	return &NullableAssistantMessageTokensCache{value: val, isSet: true}
}

func (v NullableAssistantMessageTokensCache) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantMessageTokensCache) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


