/*
kuucode

kuucode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AppPath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppPath{}

// AppPath struct for AppPath
type AppPath struct {
	Config string `json:"config"`
	Data   string `json:"data"`
	Root   string `json:"root"`
	Cwd    string `json:"cwd"`
	State  string `json:"state"`
}

type _AppPath AppPath

// NewAppPath instantiates a new AppPath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppPath(config string, data string, root string, cwd string, state string) *AppPath {
	this := AppPath{}
	this.Config = config
	this.Data = data
	this.Root = root
	this.Cwd = cwd
	this.State = state
	return &this
}

// NewAppPathWithDefaults instantiates a new AppPath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppPathWithDefaults() *AppPath {
	this := AppPath{}
	return &this
}

// GetConfig returns the Config field value
func (o *AppPath) GetConfig() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *AppPath) GetConfigOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *AppPath) SetConfig(v string) {
	o.Config = v
}

// GetData returns the Data field value
func (o *AppPath) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *AppPath) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *AppPath) SetData(v string) {
	o.Data = v
}

// GetRoot returns the Root field value
func (o *AppPath) GetRoot() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Root
}

// GetRootOk returns a tuple with the Root field value
// and a boolean to check if the value has been set.
func (o *AppPath) GetRootOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Root, true
}

// SetRoot sets field value
func (o *AppPath) SetRoot(v string) {
	o.Root = v
}

// GetCwd returns the Cwd field value
func (o *AppPath) GetCwd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cwd
}

// GetCwdOk returns a tuple with the Cwd field value
// and a boolean to check if the value has been set.
func (o *AppPath) GetCwdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cwd, true
}

// SetCwd sets field value
func (o *AppPath) SetCwd(v string) {
	o.Cwd = v
}

// GetState returns the State field value
func (o *AppPath) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *AppPath) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *AppPath) SetState(v string) {
	o.State = v
}

func (o AppPath) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppPath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["config"] = o.Config
	toSerialize["data"] = o.Data
	toSerialize["root"] = o.Root
	toSerialize["cwd"] = o.Cwd
	toSerialize["state"] = o.State
	return toSerialize, nil
}

func (o *AppPath) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"config",
		"data",
		"root",
		"cwd",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppPath := _AppPath{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppPath)

	if err != nil {
		return err
	}

	*o = AppPath(varAppPath)

	return err
}

type NullableAppPath struct {
	value *AppPath
	isSet bool
}

func (v NullableAppPath) Get() *AppPath {
	return v.value
}

func (v *NullableAppPath) Set(val *AppPath) {
	v.value = val
	v.isSet = true
}

func (v NullableAppPath) IsSet() bool {
	return v.isSet
}

func (v *NullableAppPath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppPath(val *AppPath) *NullableAppPath {
	return &NullableAppPath{value: val, isSet: true}
}

func (v NullableAppPath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppPath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
