/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SymbolSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SymbolSource{}

// SymbolSource struct for SymbolSource
type SymbolSource struct {
	Text FilePartSourceText `json:"text"`
	Type string `json:"type"`
	Path string `json:"path"`
	Range Range `json:"range"`
	Name string `json:"name"`
	Kind int32 `json:"kind"`
}

type _SymbolSource SymbolSource

// NewSymbolSource instantiates a new SymbolSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSymbolSource(text FilePartSourceText, type_ string, path string, range_ Range, name string, kind int32) *SymbolSource {
	this := SymbolSource{}
	this.Text = text
	this.Type = type_
	this.Path = path
	this.Range = range_
	this.Name = name
	this.Kind = kind
	return &this
}

// NewSymbolSourceWithDefaults instantiates a new SymbolSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSymbolSourceWithDefaults() *SymbolSource {
	this := SymbolSource{}
	return &this
}

// GetText returns the Text field value
func (o *SymbolSource) GetText() FilePartSourceText {
	if o == nil {
		var ret FilePartSourceText
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *SymbolSource) GetTextOk() (*FilePartSourceText, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *SymbolSource) SetText(v FilePartSourceText) {
	o.Text = v
}

// GetType returns the Type field value
func (o *SymbolSource) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SymbolSource) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SymbolSource) SetType(v string) {
	o.Type = v
}

// GetPath returns the Path field value
func (o *SymbolSource) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *SymbolSource) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *SymbolSource) SetPath(v string) {
	o.Path = v
}

// GetRange returns the Range field value
func (o *SymbolSource) GetRange() Range {
	if o == nil {
		var ret Range
		return ret
	}

	return o.Range
}

// GetRangeOk returns a tuple with the Range field value
// and a boolean to check if the value has been set.
func (o *SymbolSource) GetRangeOk() (*Range, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Range, true
}

// SetRange sets field value
func (o *SymbolSource) SetRange(v Range) {
	o.Range = v
}

// GetName returns the Name field value
func (o *SymbolSource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SymbolSource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SymbolSource) SetName(v string) {
	o.Name = v
}

// GetKind returns the Kind field value
func (o *SymbolSource) GetKind() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *SymbolSource) GetKindOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *SymbolSource) SetKind(v int32) {
	o.Kind = v
}

func (o SymbolSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SymbolSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	toSerialize["type"] = o.Type
	toSerialize["path"] = o.Path
	toSerialize["range"] = o.Range
	toSerialize["name"] = o.Name
	toSerialize["kind"] = o.Kind
	return toSerialize, nil
}

func (o *SymbolSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
		"type",
		"path",
		"range",
		"name",
		"kind",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSymbolSource := _SymbolSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSymbolSource)

	if err != nil {
		return err
	}

	*o = SymbolSource(varSymbolSource)

	return err
}

type NullableSymbolSource struct {
	value *SymbolSource
	isSet bool
}

func (v NullableSymbolSource) Get() *SymbolSource {
	return v.value
}

func (v *NullableSymbolSource) Set(val *SymbolSource) {
	v.value = val
	v.isSet = true
}

func (v NullableSymbolSource) IsSet() bool {
	return v.isSet
}

func (v *NullableSymbolSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSymbolSource(val *SymbolSource) *NullableSymbolSource {
	return &NullableSymbolSource{value: val, isSet: true}
}

func (v NullableSymbolSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSymbolSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


