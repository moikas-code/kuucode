/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolPart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolPart{}

// ToolPart struct for ToolPart
type ToolPart struct {
	Id string `json:"id"`
	SessionID string `json:"sessionID"`
	MessageID string `json:"messageID"`
	Type string `json:"type"`
	CallID string `json:"callID"`
	Tool string `json:"tool"`
	State ToolState `json:"state"`
}

type _ToolPart ToolPart

// NewToolPart instantiates a new ToolPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolPart(id string, sessionID string, messageID string, type_ string, callID string, tool string, state ToolState) *ToolPart {
	this := ToolPart{}
	this.Id = id
	this.SessionID = sessionID
	this.MessageID = messageID
	this.Type = type_
	this.CallID = callID
	this.Tool = tool
	this.State = state
	return &this
}

// NewToolPartWithDefaults instantiates a new ToolPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolPartWithDefaults() *ToolPart {
	this := ToolPart{}
	return &this
}

// GetId returns the Id field value
func (o *ToolPart) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ToolPart) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ToolPart) SetId(v string) {
	o.Id = v
}

// GetSessionID returns the SessionID field value
func (o *ToolPart) GetSessionID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionID
}

// GetSessionIDOk returns a tuple with the SessionID field value
// and a boolean to check if the value has been set.
func (o *ToolPart) GetSessionIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionID, true
}

// SetSessionID sets field value
func (o *ToolPart) SetSessionID(v string) {
	o.SessionID = v
}

// GetMessageID returns the MessageID field value
func (o *ToolPart) GetMessageID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageID
}

// GetMessageIDOk returns a tuple with the MessageID field value
// and a boolean to check if the value has been set.
func (o *ToolPart) GetMessageIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageID, true
}

// SetMessageID sets field value
func (o *ToolPart) SetMessageID(v string) {
	o.MessageID = v
}

// GetType returns the Type field value
func (o *ToolPart) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ToolPart) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ToolPart) SetType(v string) {
	o.Type = v
}

// GetCallID returns the CallID field value
func (o *ToolPart) GetCallID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallID
}

// GetCallIDOk returns a tuple with the CallID field value
// and a boolean to check if the value has been set.
func (o *ToolPart) GetCallIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallID, true
}

// SetCallID sets field value
func (o *ToolPart) SetCallID(v string) {
	o.CallID = v
}

// GetTool returns the Tool field value
func (o *ToolPart) GetTool() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tool
}

// GetToolOk returns a tuple with the Tool field value
// and a boolean to check if the value has been set.
func (o *ToolPart) GetToolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tool, true
}

// SetTool sets field value
func (o *ToolPart) SetTool(v string) {
	o.Tool = v
}

// GetState returns the State field value
func (o *ToolPart) GetState() ToolState {
	if o == nil {
		var ret ToolState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ToolPart) GetStateOk() (*ToolState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ToolPart) SetState(v ToolState) {
	o.State = v
}

func (o ToolPart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolPart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["sessionID"] = o.SessionID
	toSerialize["messageID"] = o.MessageID
	toSerialize["type"] = o.Type
	toSerialize["callID"] = o.CallID
	toSerialize["tool"] = o.Tool
	toSerialize["state"] = o.State
	return toSerialize, nil
}

func (o *ToolPart) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"sessionID",
		"messageID",
		"type",
		"callID",
		"tool",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolPart := _ToolPart{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolPart)

	if err != nil {
		return err
	}

	*o = ToolPart(varToolPart)

	return err
}

type NullableToolPart struct {
	value *ToolPart
	isSet bool
}

func (v NullableToolPart) Get() *ToolPart {
	return v.value
}

func (v *NullableToolPart) Set(val *ToolPart) {
	v.value = val
	v.isSet = true
}

func (v NullableToolPart) IsSet() bool {
	return v.isSet
}

func (v *NullableToolPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolPart(val *ToolPart) *NullableToolPart {
	return &NullableToolPart{value: val, isSet: true}
}

func (v NullableToolPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


