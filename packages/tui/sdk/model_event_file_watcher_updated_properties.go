/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventFileWatcherUpdatedProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventFileWatcherUpdatedProperties{}

// EventFileWatcherUpdatedProperties struct for EventFileWatcherUpdatedProperties
type EventFileWatcherUpdatedProperties struct {
	File string `json:"file"`
	Event EventFileWatcherUpdatedPropertiesEvent `json:"event"`
}

type _EventFileWatcherUpdatedProperties EventFileWatcherUpdatedProperties

// NewEventFileWatcherUpdatedProperties instantiates a new EventFileWatcherUpdatedProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventFileWatcherUpdatedProperties(file string, event EventFileWatcherUpdatedPropertiesEvent) *EventFileWatcherUpdatedProperties {
	this := EventFileWatcherUpdatedProperties{}
	this.File = file
	this.Event = event
	return &this
}

// NewEventFileWatcherUpdatedPropertiesWithDefaults instantiates a new EventFileWatcherUpdatedProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventFileWatcherUpdatedPropertiesWithDefaults() *EventFileWatcherUpdatedProperties {
	this := EventFileWatcherUpdatedProperties{}
	return &this
}

// GetFile returns the File field value
func (o *EventFileWatcherUpdatedProperties) GetFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.File
}

// GetFileOk returns a tuple with the File field value
// and a boolean to check if the value has been set.
func (o *EventFileWatcherUpdatedProperties) GetFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.File, true
}

// SetFile sets field value
func (o *EventFileWatcherUpdatedProperties) SetFile(v string) {
	o.File = v
}

// GetEvent returns the Event field value
func (o *EventFileWatcherUpdatedProperties) GetEvent() EventFileWatcherUpdatedPropertiesEvent {
	if o == nil {
		var ret EventFileWatcherUpdatedPropertiesEvent
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *EventFileWatcherUpdatedProperties) GetEventOk() (*EventFileWatcherUpdatedPropertiesEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *EventFileWatcherUpdatedProperties) SetEvent(v EventFileWatcherUpdatedPropertiesEvent) {
	o.Event = v
}

func (o EventFileWatcherUpdatedProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventFileWatcherUpdatedProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file"] = o.File
	toSerialize["event"] = o.Event
	return toSerialize, nil
}

func (o *EventFileWatcherUpdatedProperties) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file",
		"event",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventFileWatcherUpdatedProperties := _EventFileWatcherUpdatedProperties{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventFileWatcherUpdatedProperties)

	if err != nil {
		return err
	}

	*o = EventFileWatcherUpdatedProperties(varEventFileWatcherUpdatedProperties)

	return err
}

type NullableEventFileWatcherUpdatedProperties struct {
	value *EventFileWatcherUpdatedProperties
	isSet bool
}

func (v NullableEventFileWatcherUpdatedProperties) Get() *EventFileWatcherUpdatedProperties {
	return v.value
}

func (v *NullableEventFileWatcherUpdatedProperties) Set(val *EventFileWatcherUpdatedProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableEventFileWatcherUpdatedProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableEventFileWatcherUpdatedProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventFileWatcherUpdatedProperties(val *EventFileWatcherUpdatedProperties) *NullableEventFileWatcherUpdatedProperties {
	return &NullableEventFileWatcherUpdatedProperties{value: val, isSet: true}
}

func (v NullableEventFileWatcherUpdatedProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventFileWatcherUpdatedProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


