/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Provider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Provider{}

// Provider struct for Provider
type Provider struct {
	Api *string `json:"api,omitempty"`
	Name string `json:"name"`
	Env []string `json:"env"`
	Id string `json:"id"`
	Npm *string `json:"npm,omitempty"`
	Models map[string]Model `json:"models"`
}

type _Provider Provider

// NewProvider instantiates a new Provider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvider(name string, env []string, id string, models map[string]Model) *Provider {
	this := Provider{}
	this.Name = name
	this.Env = env
	this.Id = id
	this.Models = models
	return &this
}

// NewProviderWithDefaults instantiates a new Provider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderWithDefaults() *Provider {
	this := Provider{}
	return &this
}

// GetApi returns the Api field value if set, zero value otherwise.
func (o *Provider) GetApi() string {
	if o == nil || IsNil(o.Api) {
		var ret string
		return ret
	}
	return *o.Api
}

// GetApiOk returns a tuple with the Api field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetApiOk() (*string, bool) {
	if o == nil || IsNil(o.Api) {
		return nil, false
	}
	return o.Api, true
}

// HasApi returns a boolean if a field has been set.
func (o *Provider) HasApi() bool {
	if o != nil && !IsNil(o.Api) {
		return true
	}

	return false
}

// SetApi gets a reference to the given string and assigns it to the Api field.
func (o *Provider) SetApi(v string) {
	o.Api = &v
}

// GetName returns the Name field value
func (o *Provider) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Provider) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Provider) SetName(v string) {
	o.Name = v
}

// GetEnv returns the Env field value
func (o *Provider) GetEnv() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Env
}

// GetEnvOk returns a tuple with the Env field value
// and a boolean to check if the value has been set.
func (o *Provider) GetEnvOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Env, true
}

// SetEnv sets field value
func (o *Provider) SetEnv(v []string) {
	o.Env = v
}

// GetId returns the Id field value
func (o *Provider) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Provider) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Provider) SetId(v string) {
	o.Id = v
}

// GetNpm returns the Npm field value if set, zero value otherwise.
func (o *Provider) GetNpm() string {
	if o == nil || IsNil(o.Npm) {
		var ret string
		return ret
	}
	return *o.Npm
}

// GetNpmOk returns a tuple with the Npm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Provider) GetNpmOk() (*string, bool) {
	if o == nil || IsNil(o.Npm) {
		return nil, false
	}
	return o.Npm, true
}

// HasNpm returns a boolean if a field has been set.
func (o *Provider) HasNpm() bool {
	if o != nil && !IsNil(o.Npm) {
		return true
	}

	return false
}

// SetNpm gets a reference to the given string and assigns it to the Npm field.
func (o *Provider) SetNpm(v string) {
	o.Npm = &v
}

// GetModels returns the Models field value
func (o *Provider) GetModels() map[string]Model {
	if o == nil {
		var ret map[string]Model
		return ret
	}

	return o.Models
}

// GetModelsOk returns a tuple with the Models field value
// and a boolean to check if the value has been set.
func (o *Provider) GetModelsOk() (*map[string]Model, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Models, true
}

// SetModels sets field value
func (o *Provider) SetModels(v map[string]Model) {
	o.Models = v
}

func (o Provider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Provider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Api) {
		toSerialize["api"] = o.Api
	}
	toSerialize["name"] = o.Name
	toSerialize["env"] = o.Env
	toSerialize["id"] = o.Id
	if !IsNil(o.Npm) {
		toSerialize["npm"] = o.Npm
	}
	toSerialize["models"] = o.Models
	return toSerialize, nil
}

func (o *Provider) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"env",
		"id",
		"models",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProvider := _Provider{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProvider)

	if err != nil {
		return err
	}

	*o = Provider(varProvider)

	return err
}

type NullableProvider struct {
	value *Provider
	isSet bool
}

func (v NullableProvider) Get() *Provider {
	return v.value
}

func (v *NullableProvider) Set(val *Provider) {
	v.value = val
	v.isSet = true
}

func (v NullableProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvider(val *Provider) *NullableProvider {
	return &NullableProvider{value: val, isSet: true}
}

func (v NullableProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


