/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventStorageWriteProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventStorageWriteProperties{}

// EventStorageWriteProperties struct for EventStorageWriteProperties
type EventStorageWriteProperties struct {
	Key string `json:"key"`
	Content interface{} `json:"content,omitempty"`
}

type _EventStorageWriteProperties EventStorageWriteProperties

// NewEventStorageWriteProperties instantiates a new EventStorageWriteProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventStorageWriteProperties(key string) *EventStorageWriteProperties {
	this := EventStorageWriteProperties{}
	this.Key = key
	return &this
}

// NewEventStorageWritePropertiesWithDefaults instantiates a new EventStorageWriteProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventStorageWritePropertiesWithDefaults() *EventStorageWriteProperties {
	this := EventStorageWriteProperties{}
	return &this
}

// GetKey returns the Key field value
func (o *EventStorageWriteProperties) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *EventStorageWriteProperties) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *EventStorageWriteProperties) SetKey(v string) {
	o.Key = v
}

// GetContent returns the Content field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventStorageWriteProperties) GetContent() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventStorageWriteProperties) GetContentOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return &o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *EventStorageWriteProperties) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given interface{} and assigns it to the Content field.
func (o *EventStorageWriteProperties) SetContent(v interface{}) {
	o.Content = v
}

func (o EventStorageWriteProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventStorageWriteProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	return toSerialize, nil
}

func (o *EventStorageWriteProperties) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventStorageWriteProperties := _EventStorageWriteProperties{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventStorageWriteProperties)

	if err != nil {
		return err
	}

	*o = EventStorageWriteProperties(varEventStorageWriteProperties)

	return err
}

type NullableEventStorageWriteProperties struct {
	value *EventStorageWriteProperties
	isSet bool
}

func (v NullableEventStorageWriteProperties) Get() *EventStorageWriteProperties {
	return v.value
}

func (v *NullableEventStorageWriteProperties) Set(val *EventStorageWriteProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableEventStorageWriteProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableEventStorageWriteProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventStorageWriteProperties(val *EventStorageWriteProperties) *NullableEventStorageWriteProperties {
	return &NullableEventStorageWriteProperties{value: val, isSet: true}
}

func (v NullableEventStorageWriteProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventStorageWriteProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


