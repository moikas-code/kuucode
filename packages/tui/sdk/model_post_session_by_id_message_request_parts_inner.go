/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PostSessionByIdMessageRequestPartsInner - struct for PostSessionByIdMessageRequestPartsInner
type PostSessionByIdMessageRequestPartsInner struct {
	FilePartInput *FilePartInput
	TextPartInput *TextPartInput
}

// FilePartInputAsPostSessionByIdMessageRequestPartsInner is a convenience function that returns FilePartInput wrapped in PostSessionByIdMessageRequestPartsInner
func FilePartInputAsPostSessionByIdMessageRequestPartsInner(v *FilePartInput) PostSessionByIdMessageRequestPartsInner {
	return PostSessionByIdMessageRequestPartsInner{
		FilePartInput: v,
	}
}

// TextPartInputAsPostSessionByIdMessageRequestPartsInner is a convenience function that returns TextPartInput wrapped in PostSessionByIdMessageRequestPartsInner
func TextPartInputAsPostSessionByIdMessageRequestPartsInner(v *TextPartInput) PostSessionByIdMessageRequestPartsInner {
	return PostSessionByIdMessageRequestPartsInner{
		TextPartInput: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PostSessionByIdMessageRequestPartsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FilePartInput
	err = newStrictDecoder(data).Decode(&dst.FilePartInput)
	if err == nil {
		jsonFilePartInput, _ := json.Marshal(dst.FilePartInput)
		if string(jsonFilePartInput) == "{}" { // empty struct
			dst.FilePartInput = nil
		} else {
			if err = validator.Validate(dst.FilePartInput); err != nil {
				dst.FilePartInput = nil
			} else {
				match++
			}
		}
	} else {
		dst.FilePartInput = nil
	}

	// try to unmarshal data into TextPartInput
	err = newStrictDecoder(data).Decode(&dst.TextPartInput)
	if err == nil {
		jsonTextPartInput, _ := json.Marshal(dst.TextPartInput)
		if string(jsonTextPartInput) == "{}" { // empty struct
			dst.TextPartInput = nil
		} else {
			if err = validator.Validate(dst.TextPartInput); err != nil {
				dst.TextPartInput = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextPartInput = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FilePartInput = nil
		dst.TextPartInput = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PostSessionByIdMessageRequestPartsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PostSessionByIdMessageRequestPartsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PostSessionByIdMessageRequestPartsInner) MarshalJSON() ([]byte, error) {
	if src.FilePartInput != nil {
		return json.Marshal(&src.FilePartInput)
	}

	if src.TextPartInput != nil {
		return json.Marshal(&src.TextPartInput)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PostSessionByIdMessageRequestPartsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FilePartInput != nil {
		return obj.FilePartInput
	}

	if obj.TextPartInput != nil {
		return obj.TextPartInput
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PostSessionByIdMessageRequestPartsInner) GetActualInstanceValue() (interface{}) {
	if obj.FilePartInput != nil {
		return *obj.FilePartInput
	}

	if obj.TextPartInput != nil {
		return *obj.TextPartInput
	}

	// all schemas are nil
	return nil
}

type NullablePostSessionByIdMessageRequestPartsInner struct {
	value *PostSessionByIdMessageRequestPartsInner
	isSet bool
}

func (v NullablePostSessionByIdMessageRequestPartsInner) Get() *PostSessionByIdMessageRequestPartsInner {
	return v.value
}

func (v *NullablePostSessionByIdMessageRequestPartsInner) Set(val *PostSessionByIdMessageRequestPartsInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePostSessionByIdMessageRequestPartsInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePostSessionByIdMessageRequestPartsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostSessionByIdMessageRequestPartsInner(val *PostSessionByIdMessageRequestPartsInner) *NullablePostSessionByIdMessageRequestPartsInner {
	return &NullablePostSessionByIdMessageRequestPartsInner{value: val, isSet: true}
}

func (v NullablePostSessionByIdMessageRequestPartsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostSessionByIdMessageRequestPartsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


