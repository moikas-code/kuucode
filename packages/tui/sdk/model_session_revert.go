/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SessionRevert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionRevert{}

// SessionRevert struct for SessionRevert
type SessionRevert struct {
	MessageID string `json:"messageID"`
	Part float32 `json:"part"`
	Snapshot *string `json:"snapshot,omitempty"`
}

type _SessionRevert SessionRevert

// NewSessionRevert instantiates a new SessionRevert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionRevert(messageID string, part float32) *SessionRevert {
	this := SessionRevert{}
	this.MessageID = messageID
	this.Part = part
	return &this
}

// NewSessionRevertWithDefaults instantiates a new SessionRevert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionRevertWithDefaults() *SessionRevert {
	this := SessionRevert{}
	return &this
}

// GetMessageID returns the MessageID field value
func (o *SessionRevert) GetMessageID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageID
}

// GetMessageIDOk returns a tuple with the MessageID field value
// and a boolean to check if the value has been set.
func (o *SessionRevert) GetMessageIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageID, true
}

// SetMessageID sets field value
func (o *SessionRevert) SetMessageID(v string) {
	o.MessageID = v
}

// GetPart returns the Part field value
func (o *SessionRevert) GetPart() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Part
}

// GetPartOk returns a tuple with the Part field value
// and a boolean to check if the value has been set.
func (o *SessionRevert) GetPartOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Part, true
}

// SetPart sets field value
func (o *SessionRevert) SetPart(v float32) {
	o.Part = v
}

// GetSnapshot returns the Snapshot field value if set, zero value otherwise.
func (o *SessionRevert) GetSnapshot() string {
	if o == nil || IsNil(o.Snapshot) {
		var ret string
		return ret
	}
	return *o.Snapshot
}

// GetSnapshotOk returns a tuple with the Snapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionRevert) GetSnapshotOk() (*string, bool) {
	if o == nil || IsNil(o.Snapshot) {
		return nil, false
	}
	return o.Snapshot, true
}

// HasSnapshot returns a boolean if a field has been set.
func (o *SessionRevert) HasSnapshot() bool {
	if o != nil && !IsNil(o.Snapshot) {
		return true
	}

	return false
}

// SetSnapshot gets a reference to the given string and assigns it to the Snapshot field.
func (o *SessionRevert) SetSnapshot(v string) {
	o.Snapshot = &v
}

func (o SessionRevert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionRevert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["messageID"] = o.MessageID
	toSerialize["part"] = o.Part
	if !IsNil(o.Snapshot) {
		toSerialize["snapshot"] = o.Snapshot
	}
	return toSerialize, nil
}

func (o *SessionRevert) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"messageID",
		"part",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSessionRevert := _SessionRevert{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSessionRevert)

	if err != nil {
		return err
	}

	*o = SessionRevert(varSessionRevert)

	return err
}

type NullableSessionRevert struct {
	value *SessionRevert
	isSet bool
}

func (v NullableSessionRevert) Get() *SessionRevert {
	return v.value
}

func (v *NullableSessionRevert) Set(val *SessionRevert) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionRevert) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionRevert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionRevert(val *SessionRevert) *NullableSessionRevert {
	return &NullableSessionRevert{value: val, isSet: true}
}

func (v NullableSessionRevert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionRevert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


