/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Message - struct for Message
type Message struct {
	AssistantMessage *AssistantMessage
	UserMessage *UserMessage
}

// AssistantMessageAsMessage is a convenience function that returns AssistantMessage wrapped in Message
func AssistantMessageAsMessage(v *AssistantMessage) Message {
	return Message{
		AssistantMessage: v,
	}
}

// UserMessageAsMessage is a convenience function that returns UserMessage wrapped in Message
func UserMessageAsMessage(v *UserMessage) Message {
	return Message{
		UserMessage: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Message) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AssistantMessage
	err = newStrictDecoder(data).Decode(&dst.AssistantMessage)
	if err == nil {
		jsonAssistantMessage, _ := json.Marshal(dst.AssistantMessage)
		if string(jsonAssistantMessage) == "{}" { // empty struct
			dst.AssistantMessage = nil
		} else {
			if err = validator.Validate(dst.AssistantMessage); err != nil {
				dst.AssistantMessage = nil
			} else {
				match++
			}
		}
	} else {
		dst.AssistantMessage = nil
	}

	// try to unmarshal data into UserMessage
	err = newStrictDecoder(data).Decode(&dst.UserMessage)
	if err == nil {
		jsonUserMessage, _ := json.Marshal(dst.UserMessage)
		if string(jsonUserMessage) == "{}" { // empty struct
			dst.UserMessage = nil
		} else {
			if err = validator.Validate(dst.UserMessage); err != nil {
				dst.UserMessage = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserMessage = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AssistantMessage = nil
		dst.UserMessage = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Message)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Message)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Message) MarshalJSON() ([]byte, error) {
	if src.AssistantMessage != nil {
		return json.Marshal(&src.AssistantMessage)
	}

	if src.UserMessage != nil {
		return json.Marshal(&src.UserMessage)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Message) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AssistantMessage != nil {
		return obj.AssistantMessage
	}

	if obj.UserMessage != nil {
		return obj.UserMessage
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Message) GetActualInstanceValue() (interface{}) {
	if obj.AssistantMessage != nil {
		return *obj.AssistantMessage
	}

	if obj.UserMessage != nil {
		return *obj.UserMessage
	}

	// all schemas are nil
	return nil
}

type NullableMessage struct {
	value *Message
	isSet bool
}

func (v NullableMessage) Get() *Message {
	return v.value
}

func (v *NullableMessage) Set(val *Message) {
	v.value = val
	v.isSet = true
}

func (v NullableMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessage(val *Message) *NullableMessage {
	return &NullableMessage{value: val, isSet: true}
}

func (v NullableMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


