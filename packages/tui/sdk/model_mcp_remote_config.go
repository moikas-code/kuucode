/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the McpRemoteConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &McpRemoteConfig{}

// McpRemoteConfig struct for McpRemoteConfig
type McpRemoteConfig struct {
	// Type of MCP server connection
	Type string `json:"type"`
	// URL of the remote MCP server
	Url string `json:"url"`
	// Enable or disable the MCP server on startup
	Enabled *bool `json:"enabled,omitempty"`
	// Headers to send with the request
	Headers *map[string]string `json:"headers,omitempty"`
}

type _McpRemoteConfig McpRemoteConfig

// NewMcpRemoteConfig instantiates a new McpRemoteConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcpRemoteConfig(type_ string, url string) *McpRemoteConfig {
	this := McpRemoteConfig{}
	this.Type = type_
	this.Url = url
	return &this
}

// NewMcpRemoteConfigWithDefaults instantiates a new McpRemoteConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcpRemoteConfigWithDefaults() *McpRemoteConfig {
	this := McpRemoteConfig{}
	return &this
}

// GetType returns the Type field value
func (o *McpRemoteConfig) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *McpRemoteConfig) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *McpRemoteConfig) SetType(v string) {
	o.Type = v
}

// GetUrl returns the Url field value
func (o *McpRemoteConfig) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *McpRemoteConfig) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *McpRemoteConfig) SetUrl(v string) {
	o.Url = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *McpRemoteConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McpRemoteConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *McpRemoteConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *McpRemoteConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *McpRemoteConfig) GetHeaders() map[string]string {
	if o == nil || IsNil(o.Headers) {
		var ret map[string]string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McpRemoteConfig) GetHeadersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *McpRemoteConfig) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *McpRemoteConfig) SetHeaders(v map[string]string) {
	o.Headers = &v
}

func (o McpRemoteConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o McpRemoteConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["url"] = o.Url
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	return toSerialize, nil
}

func (o *McpRemoteConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMcpRemoteConfig := _McpRemoteConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMcpRemoteConfig)

	if err != nil {
		return err
	}

	*o = McpRemoteConfig(varMcpRemoteConfig)

	return err
}

type NullableMcpRemoteConfig struct {
	value *McpRemoteConfig
	isSet bool
}

func (v NullableMcpRemoteConfig) Get() *McpRemoteConfig {
	return v.value
}

func (v *NullableMcpRemoteConfig) Set(val *McpRemoteConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableMcpRemoteConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableMcpRemoteConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcpRemoteConfig(val *McpRemoteConfig) *NullableMcpRemoteConfig {
	return &NullableMcpRemoteConfig{value: val, isSet: true}
}

func (v NullableMcpRemoteConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcpRemoteConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


