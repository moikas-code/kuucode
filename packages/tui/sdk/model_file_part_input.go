/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FilePartInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilePartInput{}

// FilePartInput struct for FilePartInput
type FilePartInput struct {
	Id *string `json:"id,omitempty"`
	Type string `json:"type"`
	Mime string `json:"mime"`
	Filename *string `json:"filename,omitempty"`
	Url string `json:"url"`
	Source *FilePartSource `json:"source,omitempty"`
}

type _FilePartInput FilePartInput

// NewFilePartInput instantiates a new FilePartInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilePartInput(type_ string, mime string, url string) *FilePartInput {
	this := FilePartInput{}
	this.Type = type_
	this.Mime = mime
	this.Url = url
	return &this
}

// NewFilePartInputWithDefaults instantiates a new FilePartInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilePartInputWithDefaults() *FilePartInput {
	this := FilePartInput{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FilePartInput) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilePartInput) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FilePartInput) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FilePartInput) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value
func (o *FilePartInput) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FilePartInput) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FilePartInput) SetType(v string) {
	o.Type = v
}

// GetMime returns the Mime field value
func (o *FilePartInput) GetMime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mime
}

// GetMimeOk returns a tuple with the Mime field value
// and a boolean to check if the value has been set.
func (o *FilePartInput) GetMimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mime, true
}

// SetMime sets field value
func (o *FilePartInput) SetMime(v string) {
	o.Mime = v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *FilePartInput) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilePartInput) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *FilePartInput) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *FilePartInput) SetFilename(v string) {
	o.Filename = &v
}

// GetUrl returns the Url field value
func (o *FilePartInput) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *FilePartInput) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *FilePartInput) SetUrl(v string) {
	o.Url = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *FilePartInput) GetSource() FilePartSource {
	if o == nil || IsNil(o.Source) {
		var ret FilePartSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilePartInput) GetSourceOk() (*FilePartSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *FilePartInput) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given FilePartSource and assigns it to the Source field.
func (o *FilePartInput) SetSource(v FilePartSource) {
	o.Source = &v
}

func (o FilePartInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilePartInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["type"] = o.Type
	toSerialize["mime"] = o.Mime
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	toSerialize["url"] = o.Url
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

func (o *FilePartInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"mime",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFilePartInput := _FilePartInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFilePartInput)

	if err != nil {
		return err
	}

	*o = FilePartInput(varFilePartInput)

	return err
}

type NullableFilePartInput struct {
	value *FilePartInput
	isSet bool
}

func (v NullableFilePartInput) Get() *FilePartInput {
	return v.value
}

func (v *NullableFilePartInput) Set(val *FilePartInput) {
	v.value = val
	v.isSet = true
}

func (v NullableFilePartInput) IsSet() bool {
	return v.isSet
}

func (v *NullableFilePartInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilePartInput(val *FilePartInput) *NullableFilePartInput {
	return &NullableFilePartInput{value: val, isSet: true}
}

func (v NullableFilePartInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilePartInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


