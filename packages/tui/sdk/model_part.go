/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Part - struct for Part
type Part struct {
	FilePart *FilePart
	SnapshotPart *SnapshotPart
	StepFinishPart *StepFinishPart
	StepStartPart *StepStartPart
	TextPart *TextPart
	ToolPart *ToolPart
}

// FilePartAsPart is a convenience function that returns FilePart wrapped in Part
func FilePartAsPart(v *FilePart) Part {
	return Part{
		FilePart: v,
	}
}

// SnapshotPartAsPart is a convenience function that returns SnapshotPart wrapped in Part
func SnapshotPartAsPart(v *SnapshotPart) Part {
	return Part{
		SnapshotPart: v,
	}
}

// StepFinishPartAsPart is a convenience function that returns StepFinishPart wrapped in Part
func StepFinishPartAsPart(v *StepFinishPart) Part {
	return Part{
		StepFinishPart: v,
	}
}

// StepStartPartAsPart is a convenience function that returns StepStartPart wrapped in Part
func StepStartPartAsPart(v *StepStartPart) Part {
	return Part{
		StepStartPart: v,
	}
}

// TextPartAsPart is a convenience function that returns TextPart wrapped in Part
func TextPartAsPart(v *TextPart) Part {
	return Part{
		TextPart: v,
	}
}

// ToolPartAsPart is a convenience function that returns ToolPart wrapped in Part
func ToolPartAsPart(v *ToolPart) Part {
	return Part{
		ToolPart: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Part) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FilePart
	err = newStrictDecoder(data).Decode(&dst.FilePart)
	if err == nil {
		jsonFilePart, _ := json.Marshal(dst.FilePart)
		if string(jsonFilePart) == "{}" { // empty struct
			dst.FilePart = nil
		} else {
			if err = validator.Validate(dst.FilePart); err != nil {
				dst.FilePart = nil
			} else {
				match++
			}
		}
	} else {
		dst.FilePart = nil
	}

	// try to unmarshal data into SnapshotPart
	err = newStrictDecoder(data).Decode(&dst.SnapshotPart)
	if err == nil {
		jsonSnapshotPart, _ := json.Marshal(dst.SnapshotPart)
		if string(jsonSnapshotPart) == "{}" { // empty struct
			dst.SnapshotPart = nil
		} else {
			if err = validator.Validate(dst.SnapshotPart); err != nil {
				dst.SnapshotPart = nil
			} else {
				match++
			}
		}
	} else {
		dst.SnapshotPart = nil
	}

	// try to unmarshal data into StepFinishPart
	err = newStrictDecoder(data).Decode(&dst.StepFinishPart)
	if err == nil {
		jsonStepFinishPart, _ := json.Marshal(dst.StepFinishPart)
		if string(jsonStepFinishPart) == "{}" { // empty struct
			dst.StepFinishPart = nil
		} else {
			if err = validator.Validate(dst.StepFinishPart); err != nil {
				dst.StepFinishPart = nil
			} else {
				match++
			}
		}
	} else {
		dst.StepFinishPart = nil
	}

	// try to unmarshal data into StepStartPart
	err = newStrictDecoder(data).Decode(&dst.StepStartPart)
	if err == nil {
		jsonStepStartPart, _ := json.Marshal(dst.StepStartPart)
		if string(jsonStepStartPart) == "{}" { // empty struct
			dst.StepStartPart = nil
		} else {
			if err = validator.Validate(dst.StepStartPart); err != nil {
				dst.StepStartPart = nil
			} else {
				match++
			}
		}
	} else {
		dst.StepStartPart = nil
	}

	// try to unmarshal data into TextPart
	err = newStrictDecoder(data).Decode(&dst.TextPart)
	if err == nil {
		jsonTextPart, _ := json.Marshal(dst.TextPart)
		if string(jsonTextPart) == "{}" { // empty struct
			dst.TextPart = nil
		} else {
			if err = validator.Validate(dst.TextPart); err != nil {
				dst.TextPart = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextPart = nil
	}

	// try to unmarshal data into ToolPart
	err = newStrictDecoder(data).Decode(&dst.ToolPart)
	if err == nil {
		jsonToolPart, _ := json.Marshal(dst.ToolPart)
		if string(jsonToolPart) == "{}" { // empty struct
			dst.ToolPart = nil
		} else {
			if err = validator.Validate(dst.ToolPart); err != nil {
				dst.ToolPart = nil
			} else {
				match++
			}
		}
	} else {
		dst.ToolPart = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FilePart = nil
		dst.SnapshotPart = nil
		dst.StepFinishPart = nil
		dst.StepStartPart = nil
		dst.TextPart = nil
		dst.ToolPart = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Part)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Part)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Part) MarshalJSON() ([]byte, error) {
	if src.FilePart != nil {
		return json.Marshal(&src.FilePart)
	}

	if src.SnapshotPart != nil {
		return json.Marshal(&src.SnapshotPart)
	}

	if src.StepFinishPart != nil {
		return json.Marshal(&src.StepFinishPart)
	}

	if src.StepStartPart != nil {
		return json.Marshal(&src.StepStartPart)
	}

	if src.TextPart != nil {
		return json.Marshal(&src.TextPart)
	}

	if src.ToolPart != nil {
		return json.Marshal(&src.ToolPart)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Part) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FilePart != nil {
		return obj.FilePart
	}

	if obj.SnapshotPart != nil {
		return obj.SnapshotPart
	}

	if obj.StepFinishPart != nil {
		return obj.StepFinishPart
	}

	if obj.StepStartPart != nil {
		return obj.StepStartPart
	}

	if obj.TextPart != nil {
		return obj.TextPart
	}

	if obj.ToolPart != nil {
		return obj.ToolPart
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Part) GetActualInstanceValue() (interface{}) {
	if obj.FilePart != nil {
		return *obj.FilePart
	}

	if obj.SnapshotPart != nil {
		return *obj.SnapshotPart
	}

	if obj.StepFinishPart != nil {
		return *obj.StepFinishPart
	}

	if obj.StepStartPart != nil {
		return *obj.StepStartPart
	}

	if obj.TextPart != nil {
		return *obj.TextPart
	}

	if obj.ToolPart != nil {
		return *obj.ToolPart
	}

	// all schemas are nil
	return nil
}

type NullablePart struct {
	value *Part
	isSet bool
}

func (v NullablePart) Get() *Part {
	return v.value
}

func (v *NullablePart) Set(val *Part) {
	v.value = val
	v.isSet = true
}

func (v NullablePart) IsSet() bool {
	return v.isSet
}

func (v *NullablePart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePart(val *Part) *NullablePart {
	return &NullablePart{value: val, isSet: true}
}

func (v NullablePart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


