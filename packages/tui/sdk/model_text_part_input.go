/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TextPartInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextPartInput{}

// TextPartInput struct for TextPartInput
type TextPartInput struct {
	Id *string `json:"id,omitempty"`
	Type string `json:"type"`
	Text string `json:"text"`
	Synthetic *bool `json:"synthetic,omitempty"`
	Time *TextPartTime `json:"time,omitempty"`
}

type _TextPartInput TextPartInput

// NewTextPartInput instantiates a new TextPartInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextPartInput(type_ string, text string) *TextPartInput {
	this := TextPartInput{}
	this.Type = type_
	this.Text = text
	return &this
}

// NewTextPartInputWithDefaults instantiates a new TextPartInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextPartInputWithDefaults() *TextPartInput {
	this := TextPartInput{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TextPartInput) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextPartInput) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TextPartInput) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TextPartInput) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value
func (o *TextPartInput) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TextPartInput) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TextPartInput) SetType(v string) {
	o.Type = v
}

// GetText returns the Text field value
func (o *TextPartInput) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *TextPartInput) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *TextPartInput) SetText(v string) {
	o.Text = v
}

// GetSynthetic returns the Synthetic field value if set, zero value otherwise.
func (o *TextPartInput) GetSynthetic() bool {
	if o == nil || IsNil(o.Synthetic) {
		var ret bool
		return ret
	}
	return *o.Synthetic
}

// GetSyntheticOk returns a tuple with the Synthetic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextPartInput) GetSyntheticOk() (*bool, bool) {
	if o == nil || IsNil(o.Synthetic) {
		return nil, false
	}
	return o.Synthetic, true
}

// HasSynthetic returns a boolean if a field has been set.
func (o *TextPartInput) HasSynthetic() bool {
	if o != nil && !IsNil(o.Synthetic) {
		return true
	}

	return false
}

// SetSynthetic gets a reference to the given bool and assigns it to the Synthetic field.
func (o *TextPartInput) SetSynthetic(v bool) {
	o.Synthetic = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *TextPartInput) GetTime() TextPartTime {
	if o == nil || IsNil(o.Time) {
		var ret TextPartTime
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextPartInput) GetTimeOk() (*TextPartTime, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *TextPartInput) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given TextPartTime and assigns it to the Time field.
func (o *TextPartInput) SetTime(v TextPartTime) {
	o.Time = &v
}

func (o TextPartInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextPartInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["type"] = o.Type
	toSerialize["text"] = o.Text
	if !IsNil(o.Synthetic) {
		toSerialize["synthetic"] = o.Synthetic
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	return toSerialize, nil
}

func (o *TextPartInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTextPartInput := _TextPartInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTextPartInput)

	if err != nil {
		return err
	}

	*o = TextPartInput(varTextPartInput)

	return err
}

type NullableTextPartInput struct {
	value *TextPartInput
	isSet bool
}

func (v NullableTextPartInput) Get() *TextPartInput {
	return v.value
}

func (v *NullableTextPartInput) Set(val *TextPartInput) {
	v.value = val
	v.isSet = true
}

func (v NullableTextPartInput) IsSet() bool {
	return v.isSet
}

func (v *NullableTextPartInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextPartInput(val *TextPartInput) *NullableTextPartInput {
	return &NullableTextPartInput{value: val, isSet: true}
}

func (v NullableTextPartInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextPartInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


