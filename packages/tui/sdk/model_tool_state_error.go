/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolStateError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolStateError{}

// ToolStateError struct for ToolStateError
type ToolStateError struct {
	Status string `json:"status"`
	Input map[string]interface{} `json:"input"`
	Error string `json:"error"`
	Time ToolStateCompletedTime `json:"time"`
}

type _ToolStateError ToolStateError

// NewToolStateError instantiates a new ToolStateError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolStateError(status string, input map[string]interface{}, error_ string, time ToolStateCompletedTime) *ToolStateError {
	this := ToolStateError{}
	this.Status = status
	this.Input = input
	this.Error = error_
	this.Time = time
	return &this
}

// NewToolStateErrorWithDefaults instantiates a new ToolStateError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolStateErrorWithDefaults() *ToolStateError {
	this := ToolStateError{}
	return &this
}

// GetStatus returns the Status field value
func (o *ToolStateError) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ToolStateError) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ToolStateError) SetStatus(v string) {
	o.Status = v
}

// GetInput returns the Input field value
func (o *ToolStateError) GetInput() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *ToolStateError) GetInputOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Input, true
}

// SetInput sets field value
func (o *ToolStateError) SetInput(v map[string]interface{}) {
	o.Input = v
}

// GetError returns the Error field value
func (o *ToolStateError) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *ToolStateError) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *ToolStateError) SetError(v string) {
	o.Error = v
}

// GetTime returns the Time field value
func (o *ToolStateError) GetTime() ToolStateCompletedTime {
	if o == nil {
		var ret ToolStateCompletedTime
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *ToolStateError) GetTimeOk() (*ToolStateCompletedTime, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *ToolStateError) SetTime(v ToolStateCompletedTime) {
	o.Time = v
}

func (o ToolStateError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolStateError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["input"] = o.Input
	toSerialize["error"] = o.Error
	toSerialize["time"] = o.Time
	return toSerialize, nil
}

func (o *ToolStateError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"input",
		"error",
		"time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolStateError := _ToolStateError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolStateError)

	if err != nil {
		return err
	}

	*o = ToolStateError(varToolStateError)

	return err
}

type NullableToolStateError struct {
	value *ToolStateError
	isSet bool
}

func (v NullableToolStateError) Get() *ToolStateError {
	return v.value
}

func (v *NullableToolStateError) Set(val *ToolStateError) {
	v.value = val
	v.isSet = true
}

func (v NullableToolStateError) IsSet() bool {
	return v.isSet
}

func (v *NullableToolStateError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolStateError(val *ToolStateError) *NullableToolStateError {
	return &NullableToolStateError{value: val, isSet: true}
}

func (v NullableToolStateError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolStateError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


