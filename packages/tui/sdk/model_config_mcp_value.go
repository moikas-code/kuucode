/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ConfigMcpValue - struct for ConfigMcpValue
type ConfigMcpValue struct {
	McpLocalConfig *McpLocalConfig
	McpRemoteConfig *McpRemoteConfig
}

// McpLocalConfigAsConfigMcpValue is a convenience function that returns McpLocalConfig wrapped in ConfigMcpValue
func McpLocalConfigAsConfigMcpValue(v *McpLocalConfig) ConfigMcpValue {
	return ConfigMcpValue{
		McpLocalConfig: v,
	}
}

// McpRemoteConfigAsConfigMcpValue is a convenience function that returns McpRemoteConfig wrapped in ConfigMcpValue
func McpRemoteConfigAsConfigMcpValue(v *McpRemoteConfig) ConfigMcpValue {
	return ConfigMcpValue{
		McpRemoteConfig: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ConfigMcpValue) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into McpLocalConfig
	err = newStrictDecoder(data).Decode(&dst.McpLocalConfig)
	if err == nil {
		jsonMcpLocalConfig, _ := json.Marshal(dst.McpLocalConfig)
		if string(jsonMcpLocalConfig) == "{}" { // empty struct
			dst.McpLocalConfig = nil
		} else {
			if err = validator.Validate(dst.McpLocalConfig); err != nil {
				dst.McpLocalConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.McpLocalConfig = nil
	}

	// try to unmarshal data into McpRemoteConfig
	err = newStrictDecoder(data).Decode(&dst.McpRemoteConfig)
	if err == nil {
		jsonMcpRemoteConfig, _ := json.Marshal(dst.McpRemoteConfig)
		if string(jsonMcpRemoteConfig) == "{}" { // empty struct
			dst.McpRemoteConfig = nil
		} else {
			if err = validator.Validate(dst.McpRemoteConfig); err != nil {
				dst.McpRemoteConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.McpRemoteConfig = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.McpLocalConfig = nil
		dst.McpRemoteConfig = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ConfigMcpValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ConfigMcpValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConfigMcpValue) MarshalJSON() ([]byte, error) {
	if src.McpLocalConfig != nil {
		return json.Marshal(&src.McpLocalConfig)
	}

	if src.McpRemoteConfig != nil {
		return json.Marshal(&src.McpRemoteConfig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ConfigMcpValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.McpLocalConfig != nil {
		return obj.McpLocalConfig
	}

	if obj.McpRemoteConfig != nil {
		return obj.McpRemoteConfig
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ConfigMcpValue) GetActualInstanceValue() (interface{}) {
	if obj.McpLocalConfig != nil {
		return *obj.McpLocalConfig
	}

	if obj.McpRemoteConfig != nil {
		return *obj.McpRemoteConfig
	}

	// all schemas are nil
	return nil
}

type NullableConfigMcpValue struct {
	value *ConfigMcpValue
	isSet bool
}

func (v NullableConfigMcpValue) Get() *ConfigMcpValue {
	return v.value
}

func (v *NullableConfigMcpValue) Set(val *ConfigMcpValue) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigMcpValue) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigMcpValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigMcpValue(val *ConfigMcpValue) *NullableConfigMcpValue {
	return &NullableConfigMcpValue{value: val, isSet: true}
}

func (v NullableConfigMcpValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigMcpValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


