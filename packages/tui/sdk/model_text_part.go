/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TextPart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextPart{}

// TextPart struct for TextPart
type TextPart struct {
	Id string `json:"id"`
	SessionID string `json:"sessionID"`
	MessageID string `json:"messageID"`
	Type string `json:"type"`
	Text string `json:"text"`
	Synthetic *bool `json:"synthetic,omitempty"`
	Time *TextPartTime `json:"time,omitempty"`
}

type _TextPart TextPart

// NewTextPart instantiates a new TextPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextPart(id string, sessionID string, messageID string, type_ string, text string) *TextPart {
	this := TextPart{}
	this.Id = id
	this.SessionID = sessionID
	this.MessageID = messageID
	this.Type = type_
	this.Text = text
	return &this
}

// NewTextPartWithDefaults instantiates a new TextPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextPartWithDefaults() *TextPart {
	this := TextPart{}
	return &this
}

// GetId returns the Id field value
func (o *TextPart) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TextPart) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TextPart) SetId(v string) {
	o.Id = v
}

// GetSessionID returns the SessionID field value
func (o *TextPart) GetSessionID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionID
}

// GetSessionIDOk returns a tuple with the SessionID field value
// and a boolean to check if the value has been set.
func (o *TextPart) GetSessionIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionID, true
}

// SetSessionID sets field value
func (o *TextPart) SetSessionID(v string) {
	o.SessionID = v
}

// GetMessageID returns the MessageID field value
func (o *TextPart) GetMessageID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageID
}

// GetMessageIDOk returns a tuple with the MessageID field value
// and a boolean to check if the value has been set.
func (o *TextPart) GetMessageIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageID, true
}

// SetMessageID sets field value
func (o *TextPart) SetMessageID(v string) {
	o.MessageID = v
}

// GetType returns the Type field value
func (o *TextPart) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TextPart) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TextPart) SetType(v string) {
	o.Type = v
}

// GetText returns the Text field value
func (o *TextPart) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *TextPart) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *TextPart) SetText(v string) {
	o.Text = v
}

// GetSynthetic returns the Synthetic field value if set, zero value otherwise.
func (o *TextPart) GetSynthetic() bool {
	if o == nil || IsNil(o.Synthetic) {
		var ret bool
		return ret
	}
	return *o.Synthetic
}

// GetSyntheticOk returns a tuple with the Synthetic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextPart) GetSyntheticOk() (*bool, bool) {
	if o == nil || IsNil(o.Synthetic) {
		return nil, false
	}
	return o.Synthetic, true
}

// HasSynthetic returns a boolean if a field has been set.
func (o *TextPart) HasSynthetic() bool {
	if o != nil && !IsNil(o.Synthetic) {
		return true
	}

	return false
}

// SetSynthetic gets a reference to the given bool and assigns it to the Synthetic field.
func (o *TextPart) SetSynthetic(v bool) {
	o.Synthetic = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *TextPart) GetTime() TextPartTime {
	if o == nil || IsNil(o.Time) {
		var ret TextPartTime
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextPart) GetTimeOk() (*TextPartTime, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *TextPart) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given TextPartTime and assigns it to the Time field.
func (o *TextPart) SetTime(v TextPartTime) {
	o.Time = &v
}

func (o TextPart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextPart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["sessionID"] = o.SessionID
	toSerialize["messageID"] = o.MessageID
	toSerialize["type"] = o.Type
	toSerialize["text"] = o.Text
	if !IsNil(o.Synthetic) {
		toSerialize["synthetic"] = o.Synthetic
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	return toSerialize, nil
}

func (o *TextPart) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"sessionID",
		"messageID",
		"type",
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTextPart := _TextPart{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTextPart)

	if err != nil {
		return err
	}

	*o = TextPart(varTextPart)

	return err
}

type NullableTextPart struct {
	value *TextPart
	isSet bool
}

func (v NullableTextPart) Get() *TextPart {
	return v.value
}

func (v *NullableTextPart) Set(val *TextPart) {
	v.value = val
	v.isSet = true
}

func (v NullableTextPart) IsSet() bool {
	return v.isSet
}

func (v *NullableTextPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextPart(val *TextPart) *NullableTextPart {
	return &NullableTextPart{value: val, isSet: true}
}

func (v NullableTextPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


