/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConfigProviderValueModelsValueCost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigProviderValueModelsValueCost{}

// ConfigProviderValueModelsValueCost struct for ConfigProviderValueModelsValueCost
type ConfigProviderValueModelsValueCost struct {
	Input float32 `json:"input"`
	Output float32 `json:"output"`
	CacheRead *float32 `json:"cache_read,omitempty"`
	CacheWrite *float32 `json:"cache_write,omitempty"`
}

type _ConfigProviderValueModelsValueCost ConfigProviderValueModelsValueCost

// NewConfigProviderValueModelsValueCost instantiates a new ConfigProviderValueModelsValueCost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigProviderValueModelsValueCost(input float32, output float32) *ConfigProviderValueModelsValueCost {
	this := ConfigProviderValueModelsValueCost{}
	this.Input = input
	this.Output = output
	return &this
}

// NewConfigProviderValueModelsValueCostWithDefaults instantiates a new ConfigProviderValueModelsValueCost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigProviderValueModelsValueCostWithDefaults() *ConfigProviderValueModelsValueCost {
	this := ConfigProviderValueModelsValueCost{}
	return &this
}

// GetInput returns the Input field value
func (o *ConfigProviderValueModelsValueCost) GetInput() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *ConfigProviderValueModelsValueCost) GetInputOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *ConfigProviderValueModelsValueCost) SetInput(v float32) {
	o.Input = v
}

// GetOutput returns the Output field value
func (o *ConfigProviderValueModelsValueCost) GetOutput() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Output
}

// GetOutputOk returns a tuple with the Output field value
// and a boolean to check if the value has been set.
func (o *ConfigProviderValueModelsValueCost) GetOutputOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Output, true
}

// SetOutput sets field value
func (o *ConfigProviderValueModelsValueCost) SetOutput(v float32) {
	o.Output = v
}

// GetCacheRead returns the CacheRead field value if set, zero value otherwise.
func (o *ConfigProviderValueModelsValueCost) GetCacheRead() float32 {
	if o == nil || IsNil(o.CacheRead) {
		var ret float32
		return ret
	}
	return *o.CacheRead
}

// GetCacheReadOk returns a tuple with the CacheRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigProviderValueModelsValueCost) GetCacheReadOk() (*float32, bool) {
	if o == nil || IsNil(o.CacheRead) {
		return nil, false
	}
	return o.CacheRead, true
}

// HasCacheRead returns a boolean if a field has been set.
func (o *ConfigProviderValueModelsValueCost) HasCacheRead() bool {
	if o != nil && !IsNil(o.CacheRead) {
		return true
	}

	return false
}

// SetCacheRead gets a reference to the given float32 and assigns it to the CacheRead field.
func (o *ConfigProviderValueModelsValueCost) SetCacheRead(v float32) {
	o.CacheRead = &v
}

// GetCacheWrite returns the CacheWrite field value if set, zero value otherwise.
func (o *ConfigProviderValueModelsValueCost) GetCacheWrite() float32 {
	if o == nil || IsNil(o.CacheWrite) {
		var ret float32
		return ret
	}
	return *o.CacheWrite
}

// GetCacheWriteOk returns a tuple with the CacheWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigProviderValueModelsValueCost) GetCacheWriteOk() (*float32, bool) {
	if o == nil || IsNil(o.CacheWrite) {
		return nil, false
	}
	return o.CacheWrite, true
}

// HasCacheWrite returns a boolean if a field has been set.
func (o *ConfigProviderValueModelsValueCost) HasCacheWrite() bool {
	if o != nil && !IsNil(o.CacheWrite) {
		return true
	}

	return false
}

// SetCacheWrite gets a reference to the given float32 and assigns it to the CacheWrite field.
func (o *ConfigProviderValueModelsValueCost) SetCacheWrite(v float32) {
	o.CacheWrite = &v
}

func (o ConfigProviderValueModelsValueCost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigProviderValueModelsValueCost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["input"] = o.Input
	toSerialize["output"] = o.Output
	if !IsNil(o.CacheRead) {
		toSerialize["cache_read"] = o.CacheRead
	}
	if !IsNil(o.CacheWrite) {
		toSerialize["cache_write"] = o.CacheWrite
	}
	return toSerialize, nil
}

func (o *ConfigProviderValueModelsValueCost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"input",
		"output",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigProviderValueModelsValueCost := _ConfigProviderValueModelsValueCost{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigProviderValueModelsValueCost)

	if err != nil {
		return err
	}

	*o = ConfigProviderValueModelsValueCost(varConfigProviderValueModelsValueCost)

	return err
}

type NullableConfigProviderValueModelsValueCost struct {
	value *ConfigProviderValueModelsValueCost
	isSet bool
}

func (v NullableConfigProviderValueModelsValueCost) Get() *ConfigProviderValueModelsValueCost {
	return v.value
}

func (v *NullableConfigProviderValueModelsValueCost) Set(val *ConfigProviderValueModelsValueCost) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigProviderValueModelsValueCost) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigProviderValueModelsValueCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigProviderValueModelsValueCost(val *ConfigProviderValueModelsValueCost) *NullableConfigProviderValueModelsValueCost {
	return &NullableConfigProviderValueModelsValueCost{value: val, isSet: true}
}

func (v NullableConfigProviderValueModelsValueCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigProviderValueModelsValueCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


