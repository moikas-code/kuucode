/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PermissionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionInfo{}

// PermissionInfo struct for PermissionInfo
type PermissionInfo struct {
	Id string `json:"id"`
	SessionID string `json:"sessionID"`
	Title string `json:"title"`
	Metadata map[string]interface{} `json:"metadata"`
	Time PermissionInfoTime `json:"time"`
}

type _PermissionInfo PermissionInfo

// NewPermissionInfo instantiates a new PermissionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionInfo(id string, sessionID string, title string, metadata map[string]interface{}, time PermissionInfoTime) *PermissionInfo {
	this := PermissionInfo{}
	this.Id = id
	this.SessionID = sessionID
	this.Title = title
	this.Metadata = metadata
	this.Time = time
	return &this
}

// NewPermissionInfoWithDefaults instantiates a new PermissionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionInfoWithDefaults() *PermissionInfo {
	this := PermissionInfo{}
	return &this
}

// GetId returns the Id field value
func (o *PermissionInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PermissionInfo) SetId(v string) {
	o.Id = v
}

// GetSessionID returns the SessionID field value
func (o *PermissionInfo) GetSessionID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionID
}

// GetSessionIDOk returns a tuple with the SessionID field value
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetSessionIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionID, true
}

// SetSessionID sets field value
func (o *PermissionInfo) SetSessionID(v string) {
	o.SessionID = v
}

// GetTitle returns the Title field value
func (o *PermissionInfo) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *PermissionInfo) SetTitle(v string) {
	o.Title = v
}

// GetMetadata returns the Metadata field value
func (o *PermissionInfo) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *PermissionInfo) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetTime returns the Time field value
func (o *PermissionInfo) GetTime() PermissionInfoTime {
	if o == nil {
		var ret PermissionInfoTime
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetTimeOk() (*PermissionInfoTime, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *PermissionInfo) SetTime(v PermissionInfoTime) {
	o.Time = v
}

func (o PermissionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["sessionID"] = o.SessionID
	toSerialize["title"] = o.Title
	toSerialize["metadata"] = o.Metadata
	toSerialize["time"] = o.Time
	return toSerialize, nil
}

func (o *PermissionInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"sessionID",
		"title",
		"metadata",
		"time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPermissionInfo := _PermissionInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPermissionInfo)

	if err != nil {
		return err
	}

	*o = PermissionInfo(varPermissionInfo)

	return err
}

type NullablePermissionInfo struct {
	value *PermissionInfo
	isSet bool
}

func (v NullablePermissionInfo) Get() *PermissionInfo {
	return v.value
}

func (v *NullablePermissionInfo) Set(val *PermissionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionInfo(val *PermissionInfo) *NullablePermissionInfo {
	return &NullablePermissionInfo{value: val, isSet: true}
}

func (v NullablePermissionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


