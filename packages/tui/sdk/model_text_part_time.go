/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TextPartTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextPartTime{}

// TextPartTime struct for TextPartTime
type TextPartTime struct {
	Start float32 `json:"start"`
	End *float32 `json:"end,omitempty"`
}

type _TextPartTime TextPartTime

// NewTextPartTime instantiates a new TextPartTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextPartTime(start float32) *TextPartTime {
	this := TextPartTime{}
	this.Start = start
	return &this
}

// NewTextPartTimeWithDefaults instantiates a new TextPartTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextPartTimeWithDefaults() *TextPartTime {
	this := TextPartTime{}
	return &this
}

// GetStart returns the Start field value
func (o *TextPartTime) GetStart() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *TextPartTime) GetStartOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *TextPartTime) SetStart(v float32) {
	o.Start = v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *TextPartTime) GetEnd() float32 {
	if o == nil || IsNil(o.End) {
		var ret float32
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextPartTime) GetEndOk() (*float32, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *TextPartTime) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given float32 and assigns it to the End field.
func (o *TextPartTime) SetEnd(v float32) {
	o.End = &v
}

func (o TextPartTime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextPartTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["start"] = o.Start
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	return toSerialize, nil
}

func (o *TextPartTime) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"start",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTextPartTime := _TextPartTime{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTextPartTime)

	if err != nil {
		return err
	}

	*o = TextPartTime(varTextPartTime)

	return err
}

type NullableTextPartTime struct {
	value *TextPartTime
	isSet bool
}

func (v NullableTextPartTime) Get() *TextPartTime {
	return v.value
}

func (v *NullableTextPartTime) Set(val *TextPartTime) {
	v.value = val
	v.isSet = true
}

func (v NullableTextPartTime) IsSet() bool {
	return v.isSet
}

func (v *NullableTextPartTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextPartTime(val *TextPartTime) *NullableTextPartTime {
	return &NullableTextPartTime{value: val, isSet: true}
}

func (v NullableTextPartTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextPartTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


