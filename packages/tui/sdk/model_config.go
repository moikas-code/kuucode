/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
)

// checks if the Config type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Config{}

// Config struct for Config
type Config struct {
	// JSON schema reference for configuration validation
	Schema *string `json:"$schema,omitempty"`
	// Theme name to use for the interface
	Theme *string `json:"theme,omitempty"`
	Keybinds *KeybindsConfig `json:"keybinds,omitempty"`
	// Control sharing behavior:'manual' allows manual sharing via commands, 'auto' enables automatic sharing, 'disabled' disables all sharing
	Share *string `json:"share,omitempty"`
	// @deprecated Use 'share' field instead. Share newly created sessions automatically
	Autoshare *bool `json:"autoshare,omitempty"`
	// Automatically update to the latest version
	Autoupdate *bool `json:"autoupdate,omitempty"`
	// Disable providers that are loaded automatically
	DisabledProviders []string `json:"disabled_providers,omitempty"`
	// Model to use in the format of provider/model, eg anthropic/claude-2
	Model *string `json:"model,omitempty"`
	// Small model to use for tasks like summarization and title generation in the format of provider/model
	SmallModel *string `json:"small_model,omitempty"`
	// Custom username to display in conversations instead of system username
	Username *string `json:"username,omitempty"`
	Mode *ConfigMode `json:"mode,omitempty"`
	// Custom provider configurations and model overrides
	Provider *map[string]ConfigProviderValue `json:"provider,omitempty"`
	// MCP (Model Context Protocol) server configurations
	Mcp map[string]ConfigMcpValue `json:"mcp,omitempty"`
	// Additional instruction files or patterns to include
	Instructions []string `json:"instructions,omitempty"`
	Layout *LayoutConfig `json:"layout,omitempty"`
	Experimental *ConfigExperimental `json:"experimental,omitempty"`
}

// NewConfig instantiates a new Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfig() *Config {
	this := Config{}
	return &this
}

// NewConfigWithDefaults instantiates a new Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigWithDefaults() *Config {
	this := Config{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *Config) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *Config) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *Config) SetSchema(v string) {
	o.Schema = &v
}

// GetTheme returns the Theme field value if set, zero value otherwise.
func (o *Config) GetTheme() string {
	if o == nil || IsNil(o.Theme) {
		var ret string
		return ret
	}
	return *o.Theme
}

// GetThemeOk returns a tuple with the Theme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetThemeOk() (*string, bool) {
	if o == nil || IsNil(o.Theme) {
		return nil, false
	}
	return o.Theme, true
}

// HasTheme returns a boolean if a field has been set.
func (o *Config) HasTheme() bool {
	if o != nil && !IsNil(o.Theme) {
		return true
	}

	return false
}

// SetTheme gets a reference to the given string and assigns it to the Theme field.
func (o *Config) SetTheme(v string) {
	o.Theme = &v
}

// GetKeybinds returns the Keybinds field value if set, zero value otherwise.
func (o *Config) GetKeybinds() KeybindsConfig {
	if o == nil || IsNil(o.Keybinds) {
		var ret KeybindsConfig
		return ret
	}
	return *o.Keybinds
}

// GetKeybindsOk returns a tuple with the Keybinds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetKeybindsOk() (*KeybindsConfig, bool) {
	if o == nil || IsNil(o.Keybinds) {
		return nil, false
	}
	return o.Keybinds, true
}

// HasKeybinds returns a boolean if a field has been set.
func (o *Config) HasKeybinds() bool {
	if o != nil && !IsNil(o.Keybinds) {
		return true
	}

	return false
}

// SetKeybinds gets a reference to the given KeybindsConfig and assigns it to the Keybinds field.
func (o *Config) SetKeybinds(v KeybindsConfig) {
	o.Keybinds = &v
}

// GetShare returns the Share field value if set, zero value otherwise.
func (o *Config) GetShare() string {
	if o == nil || IsNil(o.Share) {
		var ret string
		return ret
	}
	return *o.Share
}

// GetShareOk returns a tuple with the Share field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetShareOk() (*string, bool) {
	if o == nil || IsNil(o.Share) {
		return nil, false
	}
	return o.Share, true
}

// HasShare returns a boolean if a field has been set.
func (o *Config) HasShare() bool {
	if o != nil && !IsNil(o.Share) {
		return true
	}

	return false
}

// SetShare gets a reference to the given string and assigns it to the Share field.
func (o *Config) SetShare(v string) {
	o.Share = &v
}

// GetAutoshare returns the Autoshare field value if set, zero value otherwise.
func (o *Config) GetAutoshare() bool {
	if o == nil || IsNil(o.Autoshare) {
		var ret bool
		return ret
	}
	return *o.Autoshare
}

// GetAutoshareOk returns a tuple with the Autoshare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetAutoshareOk() (*bool, bool) {
	if o == nil || IsNil(o.Autoshare) {
		return nil, false
	}
	return o.Autoshare, true
}

// HasAutoshare returns a boolean if a field has been set.
func (o *Config) HasAutoshare() bool {
	if o != nil && !IsNil(o.Autoshare) {
		return true
	}

	return false
}

// SetAutoshare gets a reference to the given bool and assigns it to the Autoshare field.
func (o *Config) SetAutoshare(v bool) {
	o.Autoshare = &v
}

// GetAutoupdate returns the Autoupdate field value if set, zero value otherwise.
func (o *Config) GetAutoupdate() bool {
	if o == nil || IsNil(o.Autoupdate) {
		var ret bool
		return ret
	}
	return *o.Autoupdate
}

// GetAutoupdateOk returns a tuple with the Autoupdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetAutoupdateOk() (*bool, bool) {
	if o == nil || IsNil(o.Autoupdate) {
		return nil, false
	}
	return o.Autoupdate, true
}

// HasAutoupdate returns a boolean if a field has been set.
func (o *Config) HasAutoupdate() bool {
	if o != nil && !IsNil(o.Autoupdate) {
		return true
	}

	return false
}

// SetAutoupdate gets a reference to the given bool and assigns it to the Autoupdate field.
func (o *Config) SetAutoupdate(v bool) {
	o.Autoupdate = &v
}

// GetDisabledProviders returns the DisabledProviders field value if set, zero value otherwise.
func (o *Config) GetDisabledProviders() []string {
	if o == nil || IsNil(o.DisabledProviders) {
		var ret []string
		return ret
	}
	return o.DisabledProviders
}

// GetDisabledProvidersOk returns a tuple with the DisabledProviders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetDisabledProvidersOk() ([]string, bool) {
	if o == nil || IsNil(o.DisabledProviders) {
		return nil, false
	}
	return o.DisabledProviders, true
}

// HasDisabledProviders returns a boolean if a field has been set.
func (o *Config) HasDisabledProviders() bool {
	if o != nil && !IsNil(o.DisabledProviders) {
		return true
	}

	return false
}

// SetDisabledProviders gets a reference to the given []string and assigns it to the DisabledProviders field.
func (o *Config) SetDisabledProviders(v []string) {
	o.DisabledProviders = v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *Config) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *Config) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *Config) SetModel(v string) {
	o.Model = &v
}

// GetSmallModel returns the SmallModel field value if set, zero value otherwise.
func (o *Config) GetSmallModel() string {
	if o == nil || IsNil(o.SmallModel) {
		var ret string
		return ret
	}
	return *o.SmallModel
}

// GetSmallModelOk returns a tuple with the SmallModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetSmallModelOk() (*string, bool) {
	if o == nil || IsNil(o.SmallModel) {
		return nil, false
	}
	return o.SmallModel, true
}

// HasSmallModel returns a boolean if a field has been set.
func (o *Config) HasSmallModel() bool {
	if o != nil && !IsNil(o.SmallModel) {
		return true
	}

	return false
}

// SetSmallModel gets a reference to the given string and assigns it to the SmallModel field.
func (o *Config) SetSmallModel(v string) {
	o.SmallModel = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *Config) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *Config) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *Config) SetUsername(v string) {
	o.Username = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *Config) GetMode() ConfigMode {
	if o == nil || IsNil(o.Mode) {
		var ret ConfigMode
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetModeOk() (*ConfigMode, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *Config) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given ConfigMode and assigns it to the Mode field.
func (o *Config) SetMode(v ConfigMode) {
	o.Mode = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *Config) GetProvider() map[string]ConfigProviderValue {
	if o == nil || IsNil(o.Provider) {
		var ret map[string]ConfigProviderValue
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetProviderOk() (*map[string]ConfigProviderValue, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *Config) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given map[string]ConfigProviderValue and assigns it to the Provider field.
func (o *Config) SetProvider(v map[string]ConfigProviderValue) {
	o.Provider = &v
}

// GetMcp returns the Mcp field value if set, zero value otherwise.
func (o *Config) GetMcp() map[string]ConfigMcpValue {
	if o == nil || IsNil(o.Mcp) {
		var ret map[string]ConfigMcpValue
		return ret
	}
	return o.Mcp
}

// GetMcpOk returns a tuple with the Mcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetMcpOk() (map[string]ConfigMcpValue, bool) {
	if o == nil || IsNil(o.Mcp) {
		return map[string]ConfigMcpValue{}, false
	}
	return o.Mcp, true
}

// HasMcp returns a boolean if a field has been set.
func (o *Config) HasMcp() bool {
	if o != nil && !IsNil(o.Mcp) {
		return true
	}

	return false
}

// SetMcp gets a reference to the given map[string]ConfigMcpValue and assigns it to the Mcp field.
func (o *Config) SetMcp(v map[string]ConfigMcpValue) {
	o.Mcp = v
}

// GetInstructions returns the Instructions field value if set, zero value otherwise.
func (o *Config) GetInstructions() []string {
	if o == nil || IsNil(o.Instructions) {
		var ret []string
		return ret
	}
	return o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetInstructionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Instructions) {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *Config) HasInstructions() bool {
	if o != nil && !IsNil(o.Instructions) {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given []string and assigns it to the Instructions field.
func (o *Config) SetInstructions(v []string) {
	o.Instructions = v
}

// GetLayout returns the Layout field value if set, zero value otherwise.
func (o *Config) GetLayout() LayoutConfig {
	if o == nil || IsNil(o.Layout) {
		var ret LayoutConfig
		return ret
	}
	return *o.Layout
}

// GetLayoutOk returns a tuple with the Layout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetLayoutOk() (*LayoutConfig, bool) {
	if o == nil || IsNil(o.Layout) {
		return nil, false
	}
	return o.Layout, true
}

// HasLayout returns a boolean if a field has been set.
func (o *Config) HasLayout() bool {
	if o != nil && !IsNil(o.Layout) {
		return true
	}

	return false
}

// SetLayout gets a reference to the given LayoutConfig and assigns it to the Layout field.
func (o *Config) SetLayout(v LayoutConfig) {
	o.Layout = &v
}

// GetExperimental returns the Experimental field value if set, zero value otherwise.
func (o *Config) GetExperimental() ConfigExperimental {
	if o == nil || IsNil(o.Experimental) {
		var ret ConfigExperimental
		return ret
	}
	return *o.Experimental
}

// GetExperimentalOk returns a tuple with the Experimental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Config) GetExperimentalOk() (*ConfigExperimental, bool) {
	if o == nil || IsNil(o.Experimental) {
		return nil, false
	}
	return o.Experimental, true
}

// HasExperimental returns a boolean if a field has been set.
func (o *Config) HasExperimental() bool {
	if o != nil && !IsNil(o.Experimental) {
		return true
	}

	return false
}

// SetExperimental gets a reference to the given ConfigExperimental and assigns it to the Experimental field.
func (o *Config) SetExperimental(v ConfigExperimental) {
	o.Experimental = &v
}

func (o Config) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Config) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schema) {
		toSerialize["$schema"] = o.Schema
	}
	if !IsNil(o.Theme) {
		toSerialize["theme"] = o.Theme
	}
	if !IsNil(o.Keybinds) {
		toSerialize["keybinds"] = o.Keybinds
	}
	if !IsNil(o.Share) {
		toSerialize["share"] = o.Share
	}
	if !IsNil(o.Autoshare) {
		toSerialize["autoshare"] = o.Autoshare
	}
	if !IsNil(o.Autoupdate) {
		toSerialize["autoupdate"] = o.Autoupdate
	}
	if !IsNil(o.DisabledProviders) {
		toSerialize["disabled_providers"] = o.DisabledProviders
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.SmallModel) {
		toSerialize["small_model"] = o.SmallModel
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Mcp) {
		toSerialize["mcp"] = o.Mcp
	}
	if !IsNil(o.Instructions) {
		toSerialize["instructions"] = o.Instructions
	}
	if !IsNil(o.Layout) {
		toSerialize["layout"] = o.Layout
	}
	if !IsNil(o.Experimental) {
		toSerialize["experimental"] = o.Experimental
	}
	return toSerialize, nil
}

type NullableConfig struct {
	value *Config
	isSet bool
}

func (v NullableConfig) Get() *Config {
	return v.value
}

func (v *NullableConfig) Set(val *Config) {
	v.value = val
	v.isSet = true
}

func (v NullableConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfig(val *Config) *NullableConfig {
	return &NullableConfig{value: val, isSet: true}
}

func (v NullableConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


