/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Session type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Session{}

// Session struct for Session
type Session struct {
	Id string `json:"id" validate:"regexp=^ses"`
	ParentID *string `json:"parentID,omitempty" validate:"regexp=^ses"`
	Share *SessionShare `json:"share,omitempty"`
	Title string `json:"title"`
	Version string `json:"version"`
	Time SessionTime `json:"time"`
	Revert *SessionRevert `json:"revert,omitempty"`
}

type _Session Session

// NewSession instantiates a new Session object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSession(id string, title string, version string, time SessionTime) *Session {
	this := Session{}
	this.Id = id
	this.Title = title
	this.Version = version
	this.Time = time
	return &this
}

// NewSessionWithDefaults instantiates a new Session object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionWithDefaults() *Session {
	this := Session{}
	return &this
}

// GetId returns the Id field value
func (o *Session) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Session) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Session) SetId(v string) {
	o.Id = v
}

// GetParentID returns the ParentID field value if set, zero value otherwise.
func (o *Session) GetParentID() string {
	if o == nil || IsNil(o.ParentID) {
		var ret string
		return ret
	}
	return *o.ParentID
}

// GetParentIDOk returns a tuple with the ParentID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session) GetParentIDOk() (*string, bool) {
	if o == nil || IsNil(o.ParentID) {
		return nil, false
	}
	return o.ParentID, true
}

// HasParentID returns a boolean if a field has been set.
func (o *Session) HasParentID() bool {
	if o != nil && !IsNil(o.ParentID) {
		return true
	}

	return false
}

// SetParentID gets a reference to the given string and assigns it to the ParentID field.
func (o *Session) SetParentID(v string) {
	o.ParentID = &v
}

// GetShare returns the Share field value if set, zero value otherwise.
func (o *Session) GetShare() SessionShare {
	if o == nil || IsNil(o.Share) {
		var ret SessionShare
		return ret
	}
	return *o.Share
}

// GetShareOk returns a tuple with the Share field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session) GetShareOk() (*SessionShare, bool) {
	if o == nil || IsNil(o.Share) {
		return nil, false
	}
	return o.Share, true
}

// HasShare returns a boolean if a field has been set.
func (o *Session) HasShare() bool {
	if o != nil && !IsNil(o.Share) {
		return true
	}

	return false
}

// SetShare gets a reference to the given SessionShare and assigns it to the Share field.
func (o *Session) SetShare(v SessionShare) {
	o.Share = &v
}

// GetTitle returns the Title field value
func (o *Session) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Session) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Session) SetTitle(v string) {
	o.Title = v
}

// GetVersion returns the Version field value
func (o *Session) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Session) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Session) SetVersion(v string) {
	o.Version = v
}

// GetTime returns the Time field value
func (o *Session) GetTime() SessionTime {
	if o == nil {
		var ret SessionTime
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *Session) GetTimeOk() (*SessionTime, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *Session) SetTime(v SessionTime) {
	o.Time = v
}

// GetRevert returns the Revert field value if set, zero value otherwise.
func (o *Session) GetRevert() SessionRevert {
	if o == nil || IsNil(o.Revert) {
		var ret SessionRevert
		return ret
	}
	return *o.Revert
}

// GetRevertOk returns a tuple with the Revert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session) GetRevertOk() (*SessionRevert, bool) {
	if o == nil || IsNil(o.Revert) {
		return nil, false
	}
	return o.Revert, true
}

// HasRevert returns a boolean if a field has been set.
func (o *Session) HasRevert() bool {
	if o != nil && !IsNil(o.Revert) {
		return true
	}

	return false
}

// SetRevert gets a reference to the given SessionRevert and assigns it to the Revert field.
func (o *Session) SetRevert(v SessionRevert) {
	o.Revert = &v
}

func (o Session) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Session) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.ParentID) {
		toSerialize["parentID"] = o.ParentID
	}
	if !IsNil(o.Share) {
		toSerialize["share"] = o.Share
	}
	toSerialize["title"] = o.Title
	toSerialize["version"] = o.Version
	toSerialize["time"] = o.Time
	if !IsNil(o.Revert) {
		toSerialize["revert"] = o.Revert
	}
	return toSerialize, nil
}

func (o *Session) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"title",
		"version",
		"time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSession := _Session{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSession)

	if err != nil {
		return err
	}

	*o = Session(varSession)

	return err
}

type NullableSession struct {
	value *Session
	isSet bool
}

func (v NullableSession) Get() *Session {
	return v.value
}

func (v *NullableSession) Set(val *Session) {
	v.value = val
	v.isSet = true
}

func (v NullableSession) IsSet() bool {
	return v.isSet
}

func (v *NullableSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSession(val *Session) *NullableSession {
	return &NullableSession{value: val, isSet: true}
}

func (v NullableSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


