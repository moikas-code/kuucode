/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
)

// checks if the ConfigMode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigMode{}

// ConfigMode Modes configuration, see https://kuucode.ai/docs/modes
type ConfigMode struct {
	Build *ModeConfig `json:"build,omitempty"`
	Plan *ModeConfig `json:"plan,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConfigMode ConfigMode

// NewConfigMode instantiates a new ConfigMode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigMode() *ConfigMode {
	this := ConfigMode{}
	return &this
}

// NewConfigModeWithDefaults instantiates a new ConfigMode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigModeWithDefaults() *ConfigMode {
	this := ConfigMode{}
	return &this
}

// GetBuild returns the Build field value if set, zero value otherwise.
func (o *ConfigMode) GetBuild() ModeConfig {
	if o == nil || IsNil(o.Build) {
		var ret ModeConfig
		return ret
	}
	return *o.Build
}

// GetBuildOk returns a tuple with the Build field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMode) GetBuildOk() (*ModeConfig, bool) {
	if o == nil || IsNil(o.Build) {
		return nil, false
	}
	return o.Build, true
}

// HasBuild returns a boolean if a field has been set.
func (o *ConfigMode) HasBuild() bool {
	if o != nil && !IsNil(o.Build) {
		return true
	}

	return false
}

// SetBuild gets a reference to the given ModeConfig and assigns it to the Build field.
func (o *ConfigMode) SetBuild(v ModeConfig) {
	o.Build = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *ConfigMode) GetPlan() ModeConfig {
	if o == nil || IsNil(o.Plan) {
		var ret ModeConfig
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigMode) GetPlanOk() (*ModeConfig, bool) {
	if o == nil || IsNil(o.Plan) {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *ConfigMode) HasPlan() bool {
	if o != nil && !IsNil(o.Plan) {
		return true
	}

	return false
}

// SetPlan gets a reference to the given ModeConfig and assigns it to the Plan field.
func (o *ConfigMode) SetPlan(v ModeConfig) {
	o.Plan = &v
}

func (o ConfigMode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigMode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Build) {
		toSerialize["build"] = o.Build
	}
	if !IsNil(o.Plan) {
		toSerialize["plan"] = o.Plan
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConfigMode) UnmarshalJSON(data []byte) (err error) {
	varConfigMode := _ConfigMode{}

	err = json.Unmarshal(data, &varConfigMode)

	if err != nil {
		return err
	}

	*o = ConfigMode(varConfigMode)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "build")
		delete(additionalProperties, "plan")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConfigMode struct {
	value *ConfigMode
	isSet bool
}

func (v NullableConfigMode) Get() *ConfigMode {
	return v.value
}

func (v *NullableConfigMode) Set(val *ConfigMode) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigMode) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigMode(val *ConfigMode) *NullableConfigMode {
	return &NullableConfigMode{value: val, isSet: true}
}

func (v NullableConfigMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


