/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Event - struct for Event
type Event struct {
	EventFileEdited *EventFileEdited
	EventFileWatcherUpdated *EventFileWatcherUpdated
	EventIdeInstalled *EventIdeInstalled
	EventInstallationUpdated *EventInstallationUpdated
	EventLspClientDiagnostics *EventLspClientDiagnostics
	EventMessagePartUpdated *EventMessagePartUpdated
	EventMessageRemoved *EventMessageRemoved
	EventMessageUpdated *EventMessageUpdated
	EventPermissionUpdated *EventPermissionUpdated
	EventSessionDeleted *EventSessionDeleted
	EventSessionError *EventSessionError
	EventSessionIdle *EventSessionIdle
	EventSessionUpdated *EventSessionUpdated
	EventStorageWrite *EventStorageWrite
}

// EventFileEditedAsEvent is a convenience function that returns EventFileEdited wrapped in Event
func EventFileEditedAsEvent(v *EventFileEdited) Event {
	return Event{
		EventFileEdited: v,
	}
}

// EventFileWatcherUpdatedAsEvent is a convenience function that returns EventFileWatcherUpdated wrapped in Event
func EventFileWatcherUpdatedAsEvent(v *EventFileWatcherUpdated) Event {
	return Event{
		EventFileWatcherUpdated: v,
	}
}

// EventIdeInstalledAsEvent is a convenience function that returns EventIdeInstalled wrapped in Event
func EventIdeInstalledAsEvent(v *EventIdeInstalled) Event {
	return Event{
		EventIdeInstalled: v,
	}
}

// EventInstallationUpdatedAsEvent is a convenience function that returns EventInstallationUpdated wrapped in Event
func EventInstallationUpdatedAsEvent(v *EventInstallationUpdated) Event {
	return Event{
		EventInstallationUpdated: v,
	}
}

// EventLspClientDiagnosticsAsEvent is a convenience function that returns EventLspClientDiagnostics wrapped in Event
func EventLspClientDiagnosticsAsEvent(v *EventLspClientDiagnostics) Event {
	return Event{
		EventLspClientDiagnostics: v,
	}
}

// EventMessagePartUpdatedAsEvent is a convenience function that returns EventMessagePartUpdated wrapped in Event
func EventMessagePartUpdatedAsEvent(v *EventMessagePartUpdated) Event {
	return Event{
		EventMessagePartUpdated: v,
	}
}

// EventMessageRemovedAsEvent is a convenience function that returns EventMessageRemoved wrapped in Event
func EventMessageRemovedAsEvent(v *EventMessageRemoved) Event {
	return Event{
		EventMessageRemoved: v,
	}
}

// EventMessageUpdatedAsEvent is a convenience function that returns EventMessageUpdated wrapped in Event
func EventMessageUpdatedAsEvent(v *EventMessageUpdated) Event {
	return Event{
		EventMessageUpdated: v,
	}
}

// EventPermissionUpdatedAsEvent is a convenience function that returns EventPermissionUpdated wrapped in Event
func EventPermissionUpdatedAsEvent(v *EventPermissionUpdated) Event {
	return Event{
		EventPermissionUpdated: v,
	}
}

// EventSessionDeletedAsEvent is a convenience function that returns EventSessionDeleted wrapped in Event
func EventSessionDeletedAsEvent(v *EventSessionDeleted) Event {
	return Event{
		EventSessionDeleted: v,
	}
}

// EventSessionErrorAsEvent is a convenience function that returns EventSessionError wrapped in Event
func EventSessionErrorAsEvent(v *EventSessionError) Event {
	return Event{
		EventSessionError: v,
	}
}

// EventSessionIdleAsEvent is a convenience function that returns EventSessionIdle wrapped in Event
func EventSessionIdleAsEvent(v *EventSessionIdle) Event {
	return Event{
		EventSessionIdle: v,
	}
}

// EventSessionUpdatedAsEvent is a convenience function that returns EventSessionUpdated wrapped in Event
func EventSessionUpdatedAsEvent(v *EventSessionUpdated) Event {
	return Event{
		EventSessionUpdated: v,
	}
}

// EventStorageWriteAsEvent is a convenience function that returns EventStorageWrite wrapped in Event
func EventStorageWriteAsEvent(v *EventStorageWrite) Event {
	return Event{
		EventStorageWrite: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Event) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EventFileEdited
	err = newStrictDecoder(data).Decode(&dst.EventFileEdited)
	if err == nil {
		jsonEventFileEdited, _ := json.Marshal(dst.EventFileEdited)
		if string(jsonEventFileEdited) == "{}" { // empty struct
			dst.EventFileEdited = nil
		} else {
			if err = validator.Validate(dst.EventFileEdited); err != nil {
				dst.EventFileEdited = nil
			} else {
				match++
			}
		}
	} else {
		dst.EventFileEdited = nil
	}

	// try to unmarshal data into EventFileWatcherUpdated
	err = newStrictDecoder(data).Decode(&dst.EventFileWatcherUpdated)
	if err == nil {
		jsonEventFileWatcherUpdated, _ := json.Marshal(dst.EventFileWatcherUpdated)
		if string(jsonEventFileWatcherUpdated) == "{}" { // empty struct
			dst.EventFileWatcherUpdated = nil
		} else {
			if err = validator.Validate(dst.EventFileWatcherUpdated); err != nil {
				dst.EventFileWatcherUpdated = nil
			} else {
				match++
			}
		}
	} else {
		dst.EventFileWatcherUpdated = nil
	}

	// try to unmarshal data into EventIdeInstalled
	err = newStrictDecoder(data).Decode(&dst.EventIdeInstalled)
	if err == nil {
		jsonEventIdeInstalled, _ := json.Marshal(dst.EventIdeInstalled)
		if string(jsonEventIdeInstalled) == "{}" { // empty struct
			dst.EventIdeInstalled = nil
		} else {
			if err = validator.Validate(dst.EventIdeInstalled); err != nil {
				dst.EventIdeInstalled = nil
			} else {
				match++
			}
		}
	} else {
		dst.EventIdeInstalled = nil
	}

	// try to unmarshal data into EventInstallationUpdated
	err = newStrictDecoder(data).Decode(&dst.EventInstallationUpdated)
	if err == nil {
		jsonEventInstallationUpdated, _ := json.Marshal(dst.EventInstallationUpdated)
		if string(jsonEventInstallationUpdated) == "{}" { // empty struct
			dst.EventInstallationUpdated = nil
		} else {
			if err = validator.Validate(dst.EventInstallationUpdated); err != nil {
				dst.EventInstallationUpdated = nil
			} else {
				match++
			}
		}
	} else {
		dst.EventInstallationUpdated = nil
	}

	// try to unmarshal data into EventLspClientDiagnostics
	err = newStrictDecoder(data).Decode(&dst.EventLspClientDiagnostics)
	if err == nil {
		jsonEventLspClientDiagnostics, _ := json.Marshal(dst.EventLspClientDiagnostics)
		if string(jsonEventLspClientDiagnostics) == "{}" { // empty struct
			dst.EventLspClientDiagnostics = nil
		} else {
			if err = validator.Validate(dst.EventLspClientDiagnostics); err != nil {
				dst.EventLspClientDiagnostics = nil
			} else {
				match++
			}
		}
	} else {
		dst.EventLspClientDiagnostics = nil
	}

	// try to unmarshal data into EventMessagePartUpdated
	err = newStrictDecoder(data).Decode(&dst.EventMessagePartUpdated)
	if err == nil {
		jsonEventMessagePartUpdated, _ := json.Marshal(dst.EventMessagePartUpdated)
		if string(jsonEventMessagePartUpdated) == "{}" { // empty struct
			dst.EventMessagePartUpdated = nil
		} else {
			if err = validator.Validate(dst.EventMessagePartUpdated); err != nil {
				dst.EventMessagePartUpdated = nil
			} else {
				match++
			}
		}
	} else {
		dst.EventMessagePartUpdated = nil
	}

	// try to unmarshal data into EventMessageRemoved
	err = newStrictDecoder(data).Decode(&dst.EventMessageRemoved)
	if err == nil {
		jsonEventMessageRemoved, _ := json.Marshal(dst.EventMessageRemoved)
		if string(jsonEventMessageRemoved) == "{}" { // empty struct
			dst.EventMessageRemoved = nil
		} else {
			if err = validator.Validate(dst.EventMessageRemoved); err != nil {
				dst.EventMessageRemoved = nil
			} else {
				match++
			}
		}
	} else {
		dst.EventMessageRemoved = nil
	}

	// try to unmarshal data into EventMessageUpdated
	err = newStrictDecoder(data).Decode(&dst.EventMessageUpdated)
	if err == nil {
		jsonEventMessageUpdated, _ := json.Marshal(dst.EventMessageUpdated)
		if string(jsonEventMessageUpdated) == "{}" { // empty struct
			dst.EventMessageUpdated = nil
		} else {
			if err = validator.Validate(dst.EventMessageUpdated); err != nil {
				dst.EventMessageUpdated = nil
			} else {
				match++
			}
		}
	} else {
		dst.EventMessageUpdated = nil
	}

	// try to unmarshal data into EventPermissionUpdated
	err = newStrictDecoder(data).Decode(&dst.EventPermissionUpdated)
	if err == nil {
		jsonEventPermissionUpdated, _ := json.Marshal(dst.EventPermissionUpdated)
		if string(jsonEventPermissionUpdated) == "{}" { // empty struct
			dst.EventPermissionUpdated = nil
		} else {
			if err = validator.Validate(dst.EventPermissionUpdated); err != nil {
				dst.EventPermissionUpdated = nil
			} else {
				match++
			}
		}
	} else {
		dst.EventPermissionUpdated = nil
	}

	// try to unmarshal data into EventSessionDeleted
	err = newStrictDecoder(data).Decode(&dst.EventSessionDeleted)
	if err == nil {
		jsonEventSessionDeleted, _ := json.Marshal(dst.EventSessionDeleted)
		if string(jsonEventSessionDeleted) == "{}" { // empty struct
			dst.EventSessionDeleted = nil
		} else {
			if err = validator.Validate(dst.EventSessionDeleted); err != nil {
				dst.EventSessionDeleted = nil
			} else {
				match++
			}
		}
	} else {
		dst.EventSessionDeleted = nil
	}

	// try to unmarshal data into EventSessionError
	err = newStrictDecoder(data).Decode(&dst.EventSessionError)
	if err == nil {
		jsonEventSessionError, _ := json.Marshal(dst.EventSessionError)
		if string(jsonEventSessionError) == "{}" { // empty struct
			dst.EventSessionError = nil
		} else {
			if err = validator.Validate(dst.EventSessionError); err != nil {
				dst.EventSessionError = nil
			} else {
				match++
			}
		}
	} else {
		dst.EventSessionError = nil
	}

	// try to unmarshal data into EventSessionIdle
	err = newStrictDecoder(data).Decode(&dst.EventSessionIdle)
	if err == nil {
		jsonEventSessionIdle, _ := json.Marshal(dst.EventSessionIdle)
		if string(jsonEventSessionIdle) == "{}" { // empty struct
			dst.EventSessionIdle = nil
		} else {
			if err = validator.Validate(dst.EventSessionIdle); err != nil {
				dst.EventSessionIdle = nil
			} else {
				match++
			}
		}
	} else {
		dst.EventSessionIdle = nil
	}

	// try to unmarshal data into EventSessionUpdated
	err = newStrictDecoder(data).Decode(&dst.EventSessionUpdated)
	if err == nil {
		jsonEventSessionUpdated, _ := json.Marshal(dst.EventSessionUpdated)
		if string(jsonEventSessionUpdated) == "{}" { // empty struct
			dst.EventSessionUpdated = nil
		} else {
			if err = validator.Validate(dst.EventSessionUpdated); err != nil {
				dst.EventSessionUpdated = nil
			} else {
				match++
			}
		}
	} else {
		dst.EventSessionUpdated = nil
	}

	// try to unmarshal data into EventStorageWrite
	err = newStrictDecoder(data).Decode(&dst.EventStorageWrite)
	if err == nil {
		jsonEventStorageWrite, _ := json.Marshal(dst.EventStorageWrite)
		if string(jsonEventStorageWrite) == "{}" { // empty struct
			dst.EventStorageWrite = nil
		} else {
			if err = validator.Validate(dst.EventStorageWrite); err != nil {
				dst.EventStorageWrite = nil
			} else {
				match++
			}
		}
	} else {
		dst.EventStorageWrite = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EventFileEdited = nil
		dst.EventFileWatcherUpdated = nil
		dst.EventIdeInstalled = nil
		dst.EventInstallationUpdated = nil
		dst.EventLspClientDiagnostics = nil
		dst.EventMessagePartUpdated = nil
		dst.EventMessageRemoved = nil
		dst.EventMessageUpdated = nil
		dst.EventPermissionUpdated = nil
		dst.EventSessionDeleted = nil
		dst.EventSessionError = nil
		dst.EventSessionIdle = nil
		dst.EventSessionUpdated = nil
		dst.EventStorageWrite = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Event)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Event)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Event) MarshalJSON() ([]byte, error) {
	if src.EventFileEdited != nil {
		return json.Marshal(&src.EventFileEdited)
	}

	if src.EventFileWatcherUpdated != nil {
		return json.Marshal(&src.EventFileWatcherUpdated)
	}

	if src.EventIdeInstalled != nil {
		return json.Marshal(&src.EventIdeInstalled)
	}

	if src.EventInstallationUpdated != nil {
		return json.Marshal(&src.EventInstallationUpdated)
	}

	if src.EventLspClientDiagnostics != nil {
		return json.Marshal(&src.EventLspClientDiagnostics)
	}

	if src.EventMessagePartUpdated != nil {
		return json.Marshal(&src.EventMessagePartUpdated)
	}

	if src.EventMessageRemoved != nil {
		return json.Marshal(&src.EventMessageRemoved)
	}

	if src.EventMessageUpdated != nil {
		return json.Marshal(&src.EventMessageUpdated)
	}

	if src.EventPermissionUpdated != nil {
		return json.Marshal(&src.EventPermissionUpdated)
	}

	if src.EventSessionDeleted != nil {
		return json.Marshal(&src.EventSessionDeleted)
	}

	if src.EventSessionError != nil {
		return json.Marshal(&src.EventSessionError)
	}

	if src.EventSessionIdle != nil {
		return json.Marshal(&src.EventSessionIdle)
	}

	if src.EventSessionUpdated != nil {
		return json.Marshal(&src.EventSessionUpdated)
	}

	if src.EventStorageWrite != nil {
		return json.Marshal(&src.EventStorageWrite)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Event) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EventFileEdited != nil {
		return obj.EventFileEdited
	}

	if obj.EventFileWatcherUpdated != nil {
		return obj.EventFileWatcherUpdated
	}

	if obj.EventIdeInstalled != nil {
		return obj.EventIdeInstalled
	}

	if obj.EventInstallationUpdated != nil {
		return obj.EventInstallationUpdated
	}

	if obj.EventLspClientDiagnostics != nil {
		return obj.EventLspClientDiagnostics
	}

	if obj.EventMessagePartUpdated != nil {
		return obj.EventMessagePartUpdated
	}

	if obj.EventMessageRemoved != nil {
		return obj.EventMessageRemoved
	}

	if obj.EventMessageUpdated != nil {
		return obj.EventMessageUpdated
	}

	if obj.EventPermissionUpdated != nil {
		return obj.EventPermissionUpdated
	}

	if obj.EventSessionDeleted != nil {
		return obj.EventSessionDeleted
	}

	if obj.EventSessionError != nil {
		return obj.EventSessionError
	}

	if obj.EventSessionIdle != nil {
		return obj.EventSessionIdle
	}

	if obj.EventSessionUpdated != nil {
		return obj.EventSessionUpdated
	}

	if obj.EventStorageWrite != nil {
		return obj.EventStorageWrite
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Event) GetActualInstanceValue() (interface{}) {
	if obj.EventFileEdited != nil {
		return *obj.EventFileEdited
	}

	if obj.EventFileWatcherUpdated != nil {
		return *obj.EventFileWatcherUpdated
	}

	if obj.EventIdeInstalled != nil {
		return *obj.EventIdeInstalled
	}

	if obj.EventInstallationUpdated != nil {
		return *obj.EventInstallationUpdated
	}

	if obj.EventLspClientDiagnostics != nil {
		return *obj.EventLspClientDiagnostics
	}

	if obj.EventMessagePartUpdated != nil {
		return *obj.EventMessagePartUpdated
	}

	if obj.EventMessageRemoved != nil {
		return *obj.EventMessageRemoved
	}

	if obj.EventMessageUpdated != nil {
		return *obj.EventMessageUpdated
	}

	if obj.EventPermissionUpdated != nil {
		return *obj.EventPermissionUpdated
	}

	if obj.EventSessionDeleted != nil {
		return *obj.EventSessionDeleted
	}

	if obj.EventSessionError != nil {
		return *obj.EventSessionError
	}

	if obj.EventSessionIdle != nil {
		return *obj.EventSessionIdle
	}

	if obj.EventSessionUpdated != nil {
		return *obj.EventSessionUpdated
	}

	if obj.EventStorageWrite != nil {
		return *obj.EventStorageWrite
	}

	// all schemas are nil
	return nil
}

type NullableEvent struct {
	value *Event
	isSet bool
}

func (v NullableEvent) Get() *Event {
	return v.value
}

func (v *NullableEvent) Set(val *Event) {
	v.value = val
	v.isSet = true
}

func (v NullableEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvent(val *Event) *NullableEvent {
	return &NullableEvent{value: val, isSet: true}
}

func (v NullableEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


