/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventSessionDeleted type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventSessionDeleted{}

// EventSessionDeleted struct for EventSessionDeleted
type EventSessionDeleted struct {
	Type string `json:"type"`
	Properties EventSessionUpdatedProperties `json:"properties"`
}

type _EventSessionDeleted EventSessionDeleted

// NewEventSessionDeleted instantiates a new EventSessionDeleted object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSessionDeleted(type_ string, properties EventSessionUpdatedProperties) *EventSessionDeleted {
	this := EventSessionDeleted{}
	this.Type = type_
	this.Properties = properties
	return &this
}

// NewEventSessionDeletedWithDefaults instantiates a new EventSessionDeleted object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSessionDeletedWithDefaults() *EventSessionDeleted {
	this := EventSessionDeleted{}
	return &this
}

// GetType returns the Type field value
func (o *EventSessionDeleted) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventSessionDeleted) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventSessionDeleted) SetType(v string) {
	o.Type = v
}

// GetProperties returns the Properties field value
func (o *EventSessionDeleted) GetProperties() EventSessionUpdatedProperties {
	if o == nil {
		var ret EventSessionUpdatedProperties
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *EventSessionDeleted) GetPropertiesOk() (*EventSessionUpdatedProperties, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *EventSessionDeleted) SetProperties(v EventSessionUpdatedProperties) {
	o.Properties = v
}

func (o EventSessionDeleted) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventSessionDeleted) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["properties"] = o.Properties
	return toSerialize, nil
}

func (o *EventSessionDeleted) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"properties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventSessionDeleted := _EventSessionDeleted{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventSessionDeleted)

	if err != nil {
		return err
	}

	*o = EventSessionDeleted(varEventSessionDeleted)

	return err
}

type NullableEventSessionDeleted struct {
	value *EventSessionDeleted
	isSet bool
}

func (v NullableEventSessionDeleted) Get() *EventSessionDeleted {
	return v.value
}

func (v *NullableEventSessionDeleted) Set(val *EventSessionDeleted) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSessionDeleted) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSessionDeleted) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSessionDeleted(val *EventSessionDeleted) *NullableEventSessionDeleted {
	return &NullableEventSessionDeleted{value: val, isSet: true}
}

func (v NullableEventSessionDeleted) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSessionDeleted) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


