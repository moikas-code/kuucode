/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FilePartSourceText type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilePartSourceText{}

// FilePartSourceText struct for FilePartSourceText
type FilePartSourceText struct {
	Value string `json:"value"`
	Start int32 `json:"start"`
	End int32 `json:"end"`
}

type _FilePartSourceText FilePartSourceText

// NewFilePartSourceText instantiates a new FilePartSourceText object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilePartSourceText(value string, start int32, end int32) *FilePartSourceText {
	this := FilePartSourceText{}
	this.Value = value
	this.Start = start
	this.End = end
	return &this
}

// NewFilePartSourceTextWithDefaults instantiates a new FilePartSourceText object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilePartSourceTextWithDefaults() *FilePartSourceText {
	this := FilePartSourceText{}
	return &this
}

// GetValue returns the Value field value
func (o *FilePartSourceText) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *FilePartSourceText) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *FilePartSourceText) SetValue(v string) {
	o.Value = v
}

// GetStart returns the Start field value
func (o *FilePartSourceText) GetStart() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *FilePartSourceText) GetStartOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *FilePartSourceText) SetStart(v int32) {
	o.Start = v
}

// GetEnd returns the End field value
func (o *FilePartSourceText) GetEnd() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *FilePartSourceText) GetEndOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *FilePartSourceText) SetEnd(v int32) {
	o.End = v
}

func (o FilePartSourceText) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilePartSourceText) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	toSerialize["start"] = o.Start
	toSerialize["end"] = o.End
	return toSerialize, nil
}

func (o *FilePartSourceText) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
		"start",
		"end",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFilePartSourceText := _FilePartSourceText{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFilePartSourceText)

	if err != nil {
		return err
	}

	*o = FilePartSourceText(varFilePartSourceText)

	return err
}

type NullableFilePartSourceText struct {
	value *FilePartSourceText
	isSet bool
}

func (v NullableFilePartSourceText) Get() *FilePartSourceText {
	return v.value
}

func (v *NullableFilePartSourceText) Set(val *FilePartSourceText) {
	v.value = val
	v.isSet = true
}

func (v NullableFilePartSourceText) IsSet() bool {
	return v.isSet
}

func (v *NullableFilePartSourceText) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilePartSourceText(val *FilePartSourceText) *NullableFilePartSourceText {
	return &NullableFilePartSourceText{value: val, isSet: true}
}

func (v NullableFilePartSourceText) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilePartSourceText) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


