/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"fmt"
)

// LayoutConfig the model 'LayoutConfig'
type LayoutConfig string

// List of LayoutConfig
const (
	LAYOUTCONFIG_AUTO LayoutConfig = "auto"
	LAYOUTCONFIG_STRETCH LayoutConfig = "stretch"
)

// All allowed values of LayoutConfig enum
var AllowedLayoutConfigEnumValues = []LayoutConfig{
	"auto",
	"stretch",
}

func (v *LayoutConfig) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LayoutConfig(value)
	for _, existing := range AllowedLayoutConfigEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LayoutConfig", value)
}

// NewLayoutConfigFromValue returns a pointer to a valid LayoutConfig
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLayoutConfigFromValue(v string) (*LayoutConfig, error) {
	ev := LayoutConfig(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LayoutConfig: valid values are %v", v, AllowedLayoutConfigEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LayoutConfig) IsValid() bool {
	for _, existing := range AllowedLayoutConfigEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LayoutConfig value
func (v LayoutConfig) Ptr() *LayoutConfig {
	return &v
}

type NullableLayoutConfig struct {
	value *LayoutConfig
	isSet bool
}

func (v NullableLayoutConfig) Get() *LayoutConfig {
	return v.value
}

func (v *NullableLayoutConfig) Set(val *LayoutConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableLayoutConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableLayoutConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLayoutConfig(val *LayoutConfig) *NullableLayoutConfig {
	return &NullableLayoutConfig{value: val, isSet: true}
}

func (v NullableLayoutConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLayoutConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

