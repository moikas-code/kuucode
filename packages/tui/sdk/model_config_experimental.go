/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
)

// checks if the ConfigExperimental type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigExperimental{}

// ConfigExperimental struct for ConfigExperimental
type ConfigExperimental struct {
	Hook *ConfigExperimentalHook `json:"hook,omitempty"`
}

// NewConfigExperimental instantiates a new ConfigExperimental object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigExperimental() *ConfigExperimental {
	this := ConfigExperimental{}
	return &this
}

// NewConfigExperimentalWithDefaults instantiates a new ConfigExperimental object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigExperimentalWithDefaults() *ConfigExperimental {
	this := ConfigExperimental{}
	return &this
}

// GetHook returns the Hook field value if set, zero value otherwise.
func (o *ConfigExperimental) GetHook() ConfigExperimentalHook {
	if o == nil || IsNil(o.Hook) {
		var ret ConfigExperimentalHook
		return ret
	}
	return *o.Hook
}

// GetHookOk returns a tuple with the Hook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigExperimental) GetHookOk() (*ConfigExperimentalHook, bool) {
	if o == nil || IsNil(o.Hook) {
		return nil, false
	}
	return o.Hook, true
}

// HasHook returns a boolean if a field has been set.
func (o *ConfigExperimental) HasHook() bool {
	if o != nil && !IsNil(o.Hook) {
		return true
	}

	return false
}

// SetHook gets a reference to the given ConfigExperimentalHook and assigns it to the Hook field.
func (o *ConfigExperimental) SetHook(v ConfigExperimentalHook) {
	o.Hook = &v
}

func (o ConfigExperimental) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigExperimental) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hook) {
		toSerialize["hook"] = o.Hook
	}
	return toSerialize, nil
}

type NullableConfigExperimental struct {
	value *ConfigExperimental
	isSet bool
}

func (v NullableConfigExperimental) Get() *ConfigExperimental {
	return v.value
}

func (v *NullableConfigExperimental) Set(val *ConfigExperimental) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigExperimental) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigExperimental) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigExperimental(val *ConfigExperimental) *NullableConfigExperimental {
	return &NullableConfigExperimental{value: val, isSet: true}
}

func (v NullableConfigExperimental) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigExperimental) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


