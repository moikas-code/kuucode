/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Symbol type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Symbol{}

// Symbol struct for Symbol
type Symbol struct {
	Name string `json:"name"`
	Kind float32 `json:"kind"`
	Location SymbolLocation `json:"location"`
}

type _Symbol Symbol

// NewSymbol instantiates a new Symbol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSymbol(name string, kind float32, location SymbolLocation) *Symbol {
	this := Symbol{}
	this.Name = name
	this.Kind = kind
	this.Location = location
	return &this
}

// NewSymbolWithDefaults instantiates a new Symbol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSymbolWithDefaults() *Symbol {
	this := Symbol{}
	return &this
}

// GetName returns the Name field value
func (o *Symbol) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Symbol) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Symbol) SetName(v string) {
	o.Name = v
}

// GetKind returns the Kind field value
func (o *Symbol) GetKind() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *Symbol) GetKindOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *Symbol) SetKind(v float32) {
	o.Kind = v
}

// GetLocation returns the Location field value
func (o *Symbol) GetLocation() SymbolLocation {
	if o == nil {
		var ret SymbolLocation
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *Symbol) GetLocationOk() (*SymbolLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *Symbol) SetLocation(v SymbolLocation) {
	o.Location = v
}

func (o Symbol) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Symbol) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["kind"] = o.Kind
	toSerialize["location"] = o.Location
	return toSerialize, nil
}

func (o *Symbol) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"kind",
		"location",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSymbol := _Symbol{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSymbol)

	if err != nil {
		return err
	}

	*o = Symbol(varSymbol)

	return err
}

type NullableSymbol struct {
	value *Symbol
	isSet bool
}

func (v NullableSymbol) Get() *Symbol {
	return v.value
}

func (v *NullableSymbol) Set(val *Symbol) {
	v.value = val
	v.isSet = true
}

func (v NullableSymbol) IsSet() bool {
	return v.isSet
}

func (v *NullableSymbol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSymbol(val *Symbol) *NullableSymbol {
	return &NullableSymbol{value: val, isSet: true}
}

func (v NullableSymbol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSymbol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


