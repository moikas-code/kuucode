/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModeModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModeModel{}

// ModeModel struct for ModeModel
type ModeModel struct {
	ModelID string `json:"modelID"`
	ProviderID string `json:"providerID"`
}

type _ModeModel ModeModel

// NewModeModel instantiates a new ModeModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModeModel(modelID string, providerID string) *ModeModel {
	this := ModeModel{}
	this.ModelID = modelID
	this.ProviderID = providerID
	return &this
}

// NewModeModelWithDefaults instantiates a new ModeModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModeModelWithDefaults() *ModeModel {
	this := ModeModel{}
	return &this
}

// GetModelID returns the ModelID field value
func (o *ModeModel) GetModelID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModelID
}

// GetModelIDOk returns a tuple with the ModelID field value
// and a boolean to check if the value has been set.
func (o *ModeModel) GetModelIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModelID, true
}

// SetModelID sets field value
func (o *ModeModel) SetModelID(v string) {
	o.ModelID = v
}

// GetProviderID returns the ProviderID field value
func (o *ModeModel) GetProviderID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderID
}

// GetProviderIDOk returns a tuple with the ProviderID field value
// and a boolean to check if the value has been set.
func (o *ModeModel) GetProviderIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderID, true
}

// SetProviderID sets field value
func (o *ModeModel) SetProviderID(v string) {
	o.ProviderID = v
}

func (o ModeModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModeModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["modelID"] = o.ModelID
	toSerialize["providerID"] = o.ProviderID
	return toSerialize, nil
}

func (o *ModeModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"modelID",
		"providerID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModeModel := _ModeModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModeModel)

	if err != nil {
		return err
	}

	*o = ModeModel(varModeModel)

	return err
}

type NullableModeModel struct {
	value *ModeModel
	isSet bool
}

func (v NullableModeModel) Get() *ModeModel {
	return v.value
}

func (v *NullableModeModel) Set(val *ModeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableModeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableModeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModeModel(val *ModeModel) *NullableModeModel {
	return &NullableModeModel{value: val, isSet: true}
}

func (v NullableModeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


