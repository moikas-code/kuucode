/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventIdeInstalledProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventIdeInstalledProperties{}

// EventIdeInstalledProperties struct for EventIdeInstalledProperties
type EventIdeInstalledProperties struct {
	Ide string `json:"ide"`
}

type _EventIdeInstalledProperties EventIdeInstalledProperties

// NewEventIdeInstalledProperties instantiates a new EventIdeInstalledProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventIdeInstalledProperties(ide string) *EventIdeInstalledProperties {
	this := EventIdeInstalledProperties{}
	this.Ide = ide
	return &this
}

// NewEventIdeInstalledPropertiesWithDefaults instantiates a new EventIdeInstalledProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventIdeInstalledPropertiesWithDefaults() *EventIdeInstalledProperties {
	this := EventIdeInstalledProperties{}
	return &this
}

// GetIde returns the Ide field value
func (o *EventIdeInstalledProperties) GetIde() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ide
}

// GetIdeOk returns a tuple with the Ide field value
// and a boolean to check if the value has been set.
func (o *EventIdeInstalledProperties) GetIdeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ide, true
}

// SetIde sets field value
func (o *EventIdeInstalledProperties) SetIde(v string) {
	o.Ide = v
}

func (o EventIdeInstalledProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventIdeInstalledProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ide"] = o.Ide
	return toSerialize, nil
}

func (o *EventIdeInstalledProperties) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ide",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventIdeInstalledProperties := _EventIdeInstalledProperties{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventIdeInstalledProperties)

	if err != nil {
		return err
	}

	*o = EventIdeInstalledProperties(varEventIdeInstalledProperties)

	return err
}

type NullableEventIdeInstalledProperties struct {
	value *EventIdeInstalledProperties
	isSet bool
}

func (v NullableEventIdeInstalledProperties) Get() *EventIdeInstalledProperties {
	return v.value
}

func (v *NullableEventIdeInstalledProperties) Set(val *EventIdeInstalledProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableEventIdeInstalledProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableEventIdeInstalledProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventIdeInstalledProperties(val *EventIdeInstalledProperties) *NullableEventIdeInstalledProperties {
	return &NullableEventIdeInstalledProperties{value: val, isSet: true}
}

func (v NullableEventIdeInstalledProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventIdeInstalledProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


