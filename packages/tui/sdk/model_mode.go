/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Mode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Mode{}

// Mode struct for Mode
type Mode struct {
	Name string `json:"name"`
	Model *ModeModel `json:"model,omitempty"`
	Prompt *string `json:"prompt,omitempty"`
	Tools map[string]bool `json:"tools"`
}

type _Mode Mode

// NewMode instantiates a new Mode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMode(name string, tools map[string]bool) *Mode {
	this := Mode{}
	this.Name = name
	this.Tools = tools
	return &this
}

// NewModeWithDefaults instantiates a new Mode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModeWithDefaults() *Mode {
	this := Mode{}
	return &this
}

// GetName returns the Name field value
func (o *Mode) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Mode) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Mode) SetName(v string) {
	o.Name = v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *Mode) GetModel() ModeModel {
	if o == nil || IsNil(o.Model) {
		var ret ModeModel
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mode) GetModelOk() (*ModeModel, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *Mode) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given ModeModel and assigns it to the Model field.
func (o *Mode) SetModel(v ModeModel) {
	o.Model = &v
}

// GetPrompt returns the Prompt field value if set, zero value otherwise.
func (o *Mode) GetPrompt() string {
	if o == nil || IsNil(o.Prompt) {
		var ret string
		return ret
	}
	return *o.Prompt
}

// GetPromptOk returns a tuple with the Prompt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mode) GetPromptOk() (*string, bool) {
	if o == nil || IsNil(o.Prompt) {
		return nil, false
	}
	return o.Prompt, true
}

// HasPrompt returns a boolean if a field has been set.
func (o *Mode) HasPrompt() bool {
	if o != nil && !IsNil(o.Prompt) {
		return true
	}

	return false
}

// SetPrompt gets a reference to the given string and assigns it to the Prompt field.
func (o *Mode) SetPrompt(v string) {
	o.Prompt = &v
}

// GetTools returns the Tools field value
func (o *Mode) GetTools() map[string]bool {
	if o == nil {
		var ret map[string]bool
		return ret
	}

	return o.Tools
}

// GetToolsOk returns a tuple with the Tools field value
// and a boolean to check if the value has been set.
func (o *Mode) GetToolsOk() (*map[string]bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tools, true
}

// SetTools sets field value
func (o *Mode) SetTools(v map[string]bool) {
	o.Tools = v
}

func (o Mode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Mode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Prompt) {
		toSerialize["prompt"] = o.Prompt
	}
	toSerialize["tools"] = o.Tools
	return toSerialize, nil
}

func (o *Mode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"tools",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMode := _Mode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMode)

	if err != nil {
		return err
	}

	*o = Mode(varMode)

	return err
}

type NullableMode struct {
	value *Mode
	isSet bool
}

func (v NullableMode) Get() *Mode {
	return v.value
}

func (v *NullableMode) Set(val *Mode) {
	v.value = val
	v.isSet = true
}

func (v NullableMode) IsSet() bool {
	return v.isSet
}

func (v *NullableMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMode(val *Mode) *NullableMode {
	return &NullableMode{value: val, isSet: true}
}

func (v NullableMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


