/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Model type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Model{}

// Model struct for Model
type Model struct {
	Id string `json:"id"`
	Name string `json:"name"`
	ReleaseDate string `json:"release_date"`
	Attachment bool `json:"attachment"`
	Reasoning bool `json:"reasoning"`
	Temperature bool `json:"temperature"`
	ToolCall bool `json:"tool_call"`
	Cost ConfigProviderValueModelsValueCost `json:"cost"`
	Limit ConfigProviderValueModelsValueLimit `json:"limit"`
	Options map[string]interface{} `json:"options"`
}

type _Model Model

// NewModel instantiates a new Model object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModel(id string, name string, releaseDate string, attachment bool, reasoning bool, temperature bool, toolCall bool, cost ConfigProviderValueModelsValueCost, limit ConfigProviderValueModelsValueLimit, options map[string]interface{}) *Model {
	this := Model{}
	this.Id = id
	this.Name = name
	this.ReleaseDate = releaseDate
	this.Attachment = attachment
	this.Reasoning = reasoning
	this.Temperature = temperature
	this.ToolCall = toolCall
	this.Cost = cost
	this.Limit = limit
	this.Options = options
	return &this
}

// NewModelWithDefaults instantiates a new Model object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelWithDefaults() *Model {
	this := Model{}
	return &this
}

// GetId returns the Id field value
func (o *Model) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Model) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Model) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Model) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Model) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Model) SetName(v string) {
	o.Name = v
}

// GetReleaseDate returns the ReleaseDate field value
func (o *Model) GetReleaseDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value
// and a boolean to check if the value has been set.
func (o *Model) GetReleaseDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReleaseDate, true
}

// SetReleaseDate sets field value
func (o *Model) SetReleaseDate(v string) {
	o.ReleaseDate = v
}

// GetAttachment returns the Attachment field value
func (o *Model) GetAttachment() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Attachment
}

// GetAttachmentOk returns a tuple with the Attachment field value
// and a boolean to check if the value has been set.
func (o *Model) GetAttachmentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attachment, true
}

// SetAttachment sets field value
func (o *Model) SetAttachment(v bool) {
	o.Attachment = v
}

// GetReasoning returns the Reasoning field value
func (o *Model) GetReasoning() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Reasoning
}

// GetReasoningOk returns a tuple with the Reasoning field value
// and a boolean to check if the value has been set.
func (o *Model) GetReasoningOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reasoning, true
}

// SetReasoning sets field value
func (o *Model) SetReasoning(v bool) {
	o.Reasoning = v
}

// GetTemperature returns the Temperature field value
func (o *Model) GetTemperature() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value
// and a boolean to check if the value has been set.
func (o *Model) GetTemperatureOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Temperature, true
}

// SetTemperature sets field value
func (o *Model) SetTemperature(v bool) {
	o.Temperature = v
}

// GetToolCall returns the ToolCall field value
func (o *Model) GetToolCall() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ToolCall
}

// GetToolCallOk returns a tuple with the ToolCall field value
// and a boolean to check if the value has been set.
func (o *Model) GetToolCallOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToolCall, true
}

// SetToolCall sets field value
func (o *Model) SetToolCall(v bool) {
	o.ToolCall = v
}

// GetCost returns the Cost field value
func (o *Model) GetCost() ConfigProviderValueModelsValueCost {
	if o == nil {
		var ret ConfigProviderValueModelsValueCost
		return ret
	}

	return o.Cost
}

// GetCostOk returns a tuple with the Cost field value
// and a boolean to check if the value has been set.
func (o *Model) GetCostOk() (*ConfigProviderValueModelsValueCost, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cost, true
}

// SetCost sets field value
func (o *Model) SetCost(v ConfigProviderValueModelsValueCost) {
	o.Cost = v
}

// GetLimit returns the Limit field value
func (o *Model) GetLimit() ConfigProviderValueModelsValueLimit {
	if o == nil {
		var ret ConfigProviderValueModelsValueLimit
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *Model) GetLimitOk() (*ConfigProviderValueModelsValueLimit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *Model) SetLimit(v ConfigProviderValueModelsValueLimit) {
	o.Limit = v
}

// GetOptions returns the Options field value
func (o *Model) GetOptions() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *Model) GetOptionsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Options, true
}

// SetOptions sets field value
func (o *Model) SetOptions(v map[string]interface{}) {
	o.Options = v
}

func (o Model) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Model) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["release_date"] = o.ReleaseDate
	toSerialize["attachment"] = o.Attachment
	toSerialize["reasoning"] = o.Reasoning
	toSerialize["temperature"] = o.Temperature
	toSerialize["tool_call"] = o.ToolCall
	toSerialize["cost"] = o.Cost
	toSerialize["limit"] = o.Limit
	toSerialize["options"] = o.Options
	return toSerialize, nil
}

func (o *Model) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"release_date",
		"attachment",
		"reasoning",
		"temperature",
		"tool_call",
		"cost",
		"limit",
		"options",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModel := _Model{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModel)

	if err != nil {
		return err
	}

	*o = Model(varModel)

	return err
}

type NullableModel struct {
	value *Model
	isSet bool
}

func (v NullableModel) Get() *Model {
	return v.value
}

func (v *NullableModel) Set(val *Model) {
	v.value = val
	v.isSet = true
}

func (v NullableModel) IsSet() bool {
	return v.isSet
}

func (v *NullableModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModel(val *Model) *NullableModel {
	return &NullableModel{value: val, isSet: true}
}

func (v NullableModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


