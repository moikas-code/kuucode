/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// FilePartSource - struct for FilePartSource
type FilePartSource struct {
	FileSource *FileSource
	SymbolSource *SymbolSource
}

// FileSourceAsFilePartSource is a convenience function that returns FileSource wrapped in FilePartSource
func FileSourceAsFilePartSource(v *FileSource) FilePartSource {
	return FilePartSource{
		FileSource: v,
	}
}

// SymbolSourceAsFilePartSource is a convenience function that returns SymbolSource wrapped in FilePartSource
func SymbolSourceAsFilePartSource(v *SymbolSource) FilePartSource {
	return FilePartSource{
		SymbolSource: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FilePartSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FileSource
	err = newStrictDecoder(data).Decode(&dst.FileSource)
	if err == nil {
		jsonFileSource, _ := json.Marshal(dst.FileSource)
		if string(jsonFileSource) == "{}" { // empty struct
			dst.FileSource = nil
		} else {
			if err = validator.Validate(dst.FileSource); err != nil {
				dst.FileSource = nil
			} else {
				match++
			}
		}
	} else {
		dst.FileSource = nil
	}

	// try to unmarshal data into SymbolSource
	err = newStrictDecoder(data).Decode(&dst.SymbolSource)
	if err == nil {
		jsonSymbolSource, _ := json.Marshal(dst.SymbolSource)
		if string(jsonSymbolSource) == "{}" { // empty struct
			dst.SymbolSource = nil
		} else {
			if err = validator.Validate(dst.SymbolSource); err != nil {
				dst.SymbolSource = nil
			} else {
				match++
			}
		}
	} else {
		dst.SymbolSource = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FileSource = nil
		dst.SymbolSource = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FilePartSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FilePartSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FilePartSource) MarshalJSON() ([]byte, error) {
	if src.FileSource != nil {
		return json.Marshal(&src.FileSource)
	}

	if src.SymbolSource != nil {
		return json.Marshal(&src.SymbolSource)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FilePartSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FileSource != nil {
		return obj.FileSource
	}

	if obj.SymbolSource != nil {
		return obj.SymbolSource
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj FilePartSource) GetActualInstanceValue() (interface{}) {
	if obj.FileSource != nil {
		return *obj.FileSource
	}

	if obj.SymbolSource != nil {
		return *obj.SymbolSource
	}

	// all schemas are nil
	return nil
}

type NullableFilePartSource struct {
	value *FilePartSource
	isSet bool
}

func (v NullableFilePartSource) Get() *FilePartSource {
	return v.value
}

func (v *NullableFilePartSource) Set(val *FilePartSource) {
	v.value = val
	v.isSet = true
}

func (v NullableFilePartSource) IsSet() bool {
	return v.isSet
}

func (v *NullableFilePartSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilePartSource(val *FilePartSource) *NullableFilePartSource {
	return &NullableFilePartSource{value: val, isSet: true}
}

func (v NullableFilePartSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilePartSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


