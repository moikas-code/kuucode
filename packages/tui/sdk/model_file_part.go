/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FilePart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilePart{}

// FilePart struct for FilePart
type FilePart struct {
	Id string `json:"id"`
	SessionID string `json:"sessionID"`
	MessageID string `json:"messageID"`
	Type string `json:"type"`
	Mime string `json:"mime"`
	Filename *string `json:"filename,omitempty"`
	Url string `json:"url"`
	Source *FilePartSource `json:"source,omitempty"`
}

type _FilePart FilePart

// NewFilePart instantiates a new FilePart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilePart(id string, sessionID string, messageID string, type_ string, mime string, url string) *FilePart {
	this := FilePart{}
	this.Id = id
	this.SessionID = sessionID
	this.MessageID = messageID
	this.Type = type_
	this.Mime = mime
	this.Url = url
	return &this
}

// NewFilePartWithDefaults instantiates a new FilePart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilePartWithDefaults() *FilePart {
	this := FilePart{}
	return &this
}

// GetId returns the Id field value
func (o *FilePart) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FilePart) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FilePart) SetId(v string) {
	o.Id = v
}

// GetSessionID returns the SessionID field value
func (o *FilePart) GetSessionID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionID
}

// GetSessionIDOk returns a tuple with the SessionID field value
// and a boolean to check if the value has been set.
func (o *FilePart) GetSessionIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionID, true
}

// SetSessionID sets field value
func (o *FilePart) SetSessionID(v string) {
	o.SessionID = v
}

// GetMessageID returns the MessageID field value
func (o *FilePart) GetMessageID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageID
}

// GetMessageIDOk returns a tuple with the MessageID field value
// and a boolean to check if the value has been set.
func (o *FilePart) GetMessageIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MessageID, true
}

// SetMessageID sets field value
func (o *FilePart) SetMessageID(v string) {
	o.MessageID = v
}

// GetType returns the Type field value
func (o *FilePart) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FilePart) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FilePart) SetType(v string) {
	o.Type = v
}

// GetMime returns the Mime field value
func (o *FilePart) GetMime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mime
}

// GetMimeOk returns a tuple with the Mime field value
// and a boolean to check if the value has been set.
func (o *FilePart) GetMimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mime, true
}

// SetMime sets field value
func (o *FilePart) SetMime(v string) {
	o.Mime = v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *FilePart) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilePart) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *FilePart) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *FilePart) SetFilename(v string) {
	o.Filename = &v
}

// GetUrl returns the Url field value
func (o *FilePart) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *FilePart) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *FilePart) SetUrl(v string) {
	o.Url = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *FilePart) GetSource() FilePartSource {
	if o == nil || IsNil(o.Source) {
		var ret FilePartSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilePart) GetSourceOk() (*FilePartSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *FilePart) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given FilePartSource and assigns it to the Source field.
func (o *FilePart) SetSource(v FilePartSource) {
	o.Source = &v
}

func (o FilePart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilePart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["sessionID"] = o.SessionID
	toSerialize["messageID"] = o.MessageID
	toSerialize["type"] = o.Type
	toSerialize["mime"] = o.Mime
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	toSerialize["url"] = o.Url
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

func (o *FilePart) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"sessionID",
		"messageID",
		"type",
		"mime",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFilePart := _FilePart{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFilePart)

	if err != nil {
		return err
	}

	*o = FilePart(varFilePart)

	return err
}

type NullableFilePart struct {
	value *FilePart
	isSet bool
}

func (v NullableFilePart) Get() *FilePart {
	return v.value
}

func (v *NullableFilePart) Set(val *FilePart) {
	v.value = val
	v.isSet = true
}

func (v NullableFilePart) IsSet() bool {
	return v.isSet
}

func (v *NullableFilePart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilePart(val *FilePart) *NullableFilePart {
	return &NullableFilePart{value: val, isSet: true}
}

func (v NullableFilePart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilePart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


