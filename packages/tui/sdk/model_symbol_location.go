/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SymbolLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SymbolLocation{}

// SymbolLocation struct for SymbolLocation
type SymbolLocation struct {
	Uri string `json:"uri"`
	Range Range `json:"range"`
}

type _SymbolLocation SymbolLocation

// NewSymbolLocation instantiates a new SymbolLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSymbolLocation(uri string, range_ Range) *SymbolLocation {
	this := SymbolLocation{}
	this.Uri = uri
	this.Range = range_
	return &this
}

// NewSymbolLocationWithDefaults instantiates a new SymbolLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSymbolLocationWithDefaults() *SymbolLocation {
	this := SymbolLocation{}
	return &this
}

// GetUri returns the Uri field value
func (o *SymbolLocation) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *SymbolLocation) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *SymbolLocation) SetUri(v string) {
	o.Uri = v
}

// GetRange returns the Range field value
func (o *SymbolLocation) GetRange() Range {
	if o == nil {
		var ret Range
		return ret
	}

	return o.Range
}

// GetRangeOk returns a tuple with the Range field value
// and a boolean to check if the value has been set.
func (o *SymbolLocation) GetRangeOk() (*Range, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Range, true
}

// SetRange sets field value
func (o *SymbolLocation) SetRange(v Range) {
	o.Range = v
}

func (o SymbolLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SymbolLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uri"] = o.Uri
	toSerialize["range"] = o.Range
	return toSerialize, nil
}

func (o *SymbolLocation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uri",
		"range",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSymbolLocation := _SymbolLocation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSymbolLocation)

	if err != nil {
		return err
	}

	*o = SymbolLocation(varSymbolLocation)

	return err
}

type NullableSymbolLocation struct {
	value *SymbolLocation
	isSet bool
}

func (v NullableSymbolLocation) Get() *SymbolLocation {
	return v.value
}

func (v *NullableSymbolLocation) Set(val *SymbolLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableSymbolLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableSymbolLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSymbolLocation(val *SymbolLocation) *NullableSymbolLocation {
	return &NullableSymbolLocation{value: val, isSet: true}
}

func (v NullableSymbolLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSymbolLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


