/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssistantMessageTokens type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssistantMessageTokens{}

// AssistantMessageTokens struct for AssistantMessageTokens
type AssistantMessageTokens struct {
	Input float32 `json:"input"`
	Output float32 `json:"output"`
	Reasoning float32 `json:"reasoning"`
	Cache AssistantMessageTokensCache `json:"cache"`
}

type _AssistantMessageTokens AssistantMessageTokens

// NewAssistantMessageTokens instantiates a new AssistantMessageTokens object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssistantMessageTokens(input float32, output float32, reasoning float32, cache AssistantMessageTokensCache) *AssistantMessageTokens {
	this := AssistantMessageTokens{}
	this.Input = input
	this.Output = output
	this.Reasoning = reasoning
	this.Cache = cache
	return &this
}

// NewAssistantMessageTokensWithDefaults instantiates a new AssistantMessageTokens object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssistantMessageTokensWithDefaults() *AssistantMessageTokens {
	this := AssistantMessageTokens{}
	return &this
}

// GetInput returns the Input field value
func (o *AssistantMessageTokens) GetInput() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *AssistantMessageTokens) GetInputOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *AssistantMessageTokens) SetInput(v float32) {
	o.Input = v
}

// GetOutput returns the Output field value
func (o *AssistantMessageTokens) GetOutput() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Output
}

// GetOutputOk returns a tuple with the Output field value
// and a boolean to check if the value has been set.
func (o *AssistantMessageTokens) GetOutputOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Output, true
}

// SetOutput sets field value
func (o *AssistantMessageTokens) SetOutput(v float32) {
	o.Output = v
}

// GetReasoning returns the Reasoning field value
func (o *AssistantMessageTokens) GetReasoning() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Reasoning
}

// GetReasoningOk returns a tuple with the Reasoning field value
// and a boolean to check if the value has been set.
func (o *AssistantMessageTokens) GetReasoningOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reasoning, true
}

// SetReasoning sets field value
func (o *AssistantMessageTokens) SetReasoning(v float32) {
	o.Reasoning = v
}

// GetCache returns the Cache field value
func (o *AssistantMessageTokens) GetCache() AssistantMessageTokensCache {
	if o == nil {
		var ret AssistantMessageTokensCache
		return ret
	}

	return o.Cache
}

// GetCacheOk returns a tuple with the Cache field value
// and a boolean to check if the value has been set.
func (o *AssistantMessageTokens) GetCacheOk() (*AssistantMessageTokensCache, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cache, true
}

// SetCache sets field value
func (o *AssistantMessageTokens) SetCache(v AssistantMessageTokensCache) {
	o.Cache = v
}

func (o AssistantMessageTokens) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssistantMessageTokens) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["input"] = o.Input
	toSerialize["output"] = o.Output
	toSerialize["reasoning"] = o.Reasoning
	toSerialize["cache"] = o.Cache
	return toSerialize, nil
}

func (o *AssistantMessageTokens) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"input",
		"output",
		"reasoning",
		"cache",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssistantMessageTokens := _AssistantMessageTokens{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssistantMessageTokens)

	if err != nil {
		return err
	}

	*o = AssistantMessageTokens(varAssistantMessageTokens)

	return err
}

type NullableAssistantMessageTokens struct {
	value *AssistantMessageTokens
	isSet bool
}

func (v NullableAssistantMessageTokens) Get() *AssistantMessageTokens {
	return v.value
}

func (v *NullableAssistantMessageTokens) Set(val *AssistantMessageTokens) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantMessageTokens) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantMessageTokens) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantMessageTokens(val *AssistantMessageTokens) *NullableAssistantMessageTokens {
	return &NullableAssistantMessageTokens{value: val, isSet: true}
}

func (v NullableAssistantMessageTokens) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantMessageTokens) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


