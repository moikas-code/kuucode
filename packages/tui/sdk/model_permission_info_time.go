/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PermissionInfoTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionInfoTime{}

// PermissionInfoTime struct for PermissionInfoTime
type PermissionInfoTime struct {
	Created float32 `json:"created"`
}

type _PermissionInfoTime PermissionInfoTime

// NewPermissionInfoTime instantiates a new PermissionInfoTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionInfoTime(created float32) *PermissionInfoTime {
	this := PermissionInfoTime{}
	this.Created = created
	return &this
}

// NewPermissionInfoTimeWithDefaults instantiates a new PermissionInfoTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionInfoTimeWithDefaults() *PermissionInfoTime {
	this := PermissionInfoTime{}
	return &this
}

// GetCreated returns the Created field value
func (o *PermissionInfoTime) GetCreated() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *PermissionInfoTime) GetCreatedOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *PermissionInfoTime) SetCreated(v float32) {
	o.Created = v
}

func (o PermissionInfoTime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionInfoTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created"] = o.Created
	return toSerialize, nil
}

func (o *PermissionInfoTime) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPermissionInfoTime := _PermissionInfoTime{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPermissionInfoTime)

	if err != nil {
		return err
	}

	*o = PermissionInfoTime(varPermissionInfoTime)

	return err
}

type NullablePermissionInfoTime struct {
	value *PermissionInfoTime
	isSet bool
}

func (v NullablePermissionInfoTime) Get() *PermissionInfoTime {
	return v.value
}

func (v *NullablePermissionInfoTime) Set(val *PermissionInfoTime) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionInfoTime) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionInfoTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionInfoTime(val *PermissionInfoTime) *NullablePermissionInfoTime {
	return &NullablePermissionInfoTime{value: val, isSet: true}
}

func (v NullablePermissionInfoTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionInfoTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


