/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Match type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Match{}

// Match struct for Match
type Match struct {
	Path MatchPath `json:"path"`
	Lines MatchPath `json:"lines"`
	LineNumber float32 `json:"line_number"`
	AbsoluteOffset float32 `json:"absolute_offset"`
	Submatches []MatchSubmatchesInner `json:"submatches"`
}

type _Match Match

// NewMatch instantiates a new Match object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatch(path MatchPath, lines MatchPath, lineNumber float32, absoluteOffset float32, submatches []MatchSubmatchesInner) *Match {
	this := Match{}
	this.Path = path
	this.Lines = lines
	this.LineNumber = lineNumber
	this.AbsoluteOffset = absoluteOffset
	this.Submatches = submatches
	return &this
}

// NewMatchWithDefaults instantiates a new Match object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchWithDefaults() *Match {
	this := Match{}
	return &this
}

// GetPath returns the Path field value
func (o *Match) GetPath() MatchPath {
	if o == nil {
		var ret MatchPath
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *Match) GetPathOk() (*MatchPath, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *Match) SetPath(v MatchPath) {
	o.Path = v
}

// GetLines returns the Lines field value
func (o *Match) GetLines() MatchPath {
	if o == nil {
		var ret MatchPath
		return ret
	}

	return o.Lines
}

// GetLinesOk returns a tuple with the Lines field value
// and a boolean to check if the value has been set.
func (o *Match) GetLinesOk() (*MatchPath, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lines, true
}

// SetLines sets field value
func (o *Match) SetLines(v MatchPath) {
	o.Lines = v
}

// GetLineNumber returns the LineNumber field value
func (o *Match) GetLineNumber() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LineNumber
}

// GetLineNumberOk returns a tuple with the LineNumber field value
// and a boolean to check if the value has been set.
func (o *Match) GetLineNumberOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LineNumber, true
}

// SetLineNumber sets field value
func (o *Match) SetLineNumber(v float32) {
	o.LineNumber = v
}

// GetAbsoluteOffset returns the AbsoluteOffset field value
func (o *Match) GetAbsoluteOffset() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AbsoluteOffset
}

// GetAbsoluteOffsetOk returns a tuple with the AbsoluteOffset field value
// and a boolean to check if the value has been set.
func (o *Match) GetAbsoluteOffsetOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AbsoluteOffset, true
}

// SetAbsoluteOffset sets field value
func (o *Match) SetAbsoluteOffset(v float32) {
	o.AbsoluteOffset = v
}

// GetSubmatches returns the Submatches field value
func (o *Match) GetSubmatches() []MatchSubmatchesInner {
	if o == nil {
		var ret []MatchSubmatchesInner
		return ret
	}

	return o.Submatches
}

// GetSubmatchesOk returns a tuple with the Submatches field value
// and a boolean to check if the value has been set.
func (o *Match) GetSubmatchesOk() ([]MatchSubmatchesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Submatches, true
}

// SetSubmatches sets field value
func (o *Match) SetSubmatches(v []MatchSubmatchesInner) {
	o.Submatches = v
}

func (o Match) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Match) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["path"] = o.Path
	toSerialize["lines"] = o.Lines
	toSerialize["line_number"] = o.LineNumber
	toSerialize["absolute_offset"] = o.AbsoluteOffset
	toSerialize["submatches"] = o.Submatches
	return toSerialize, nil
}

func (o *Match) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"path",
		"lines",
		"line_number",
		"absolute_offset",
		"submatches",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMatch := _Match{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMatch)

	if err != nil {
		return err
	}

	*o = Match(varMatch)

	return err
}

type NullableMatch struct {
	value *Match
	isSet bool
}

func (v NullableMatch) Get() *Match {
	return v.value
}

func (v *NullableMatch) Set(val *Match) {
	v.value = val
	v.isSet = true
}

func (v NullableMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatch(val *Match) *NullableMatch {
	return &NullableMatch{value: val, isSet: true}
}

func (v NullableMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


