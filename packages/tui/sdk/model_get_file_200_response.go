/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetFile200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetFile200Response{}

// GetFile200Response struct for GetFile200Response
type GetFile200Response struct {
	Type string `json:"type"`
	Content string `json:"content"`
}

type _GetFile200Response GetFile200Response

// NewGetFile200Response instantiates a new GetFile200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetFile200Response(type_ string, content string) *GetFile200Response {
	this := GetFile200Response{}
	this.Type = type_
	this.Content = content
	return &this
}

// NewGetFile200ResponseWithDefaults instantiates a new GetFile200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetFile200ResponseWithDefaults() *GetFile200Response {
	this := GetFile200Response{}
	return &this
}

// GetType returns the Type field value
func (o *GetFile200Response) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GetFile200Response) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GetFile200Response) SetType(v string) {
	o.Type = v
}

// GetContent returns the Content field value
func (o *GetFile200Response) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *GetFile200Response) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *GetFile200Response) SetContent(v string) {
	o.Content = v
}

func (o GetFile200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetFile200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["content"] = o.Content
	return toSerialize, nil
}

func (o *GetFile200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetFile200Response := _GetFile200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetFile200Response)

	if err != nil {
		return err
	}

	*o = GetFile200Response(varGetFile200Response)

	return err
}

type NullableGetFile200Response struct {
	value *GetFile200Response
	isSet bool
}

func (v NullableGetFile200Response) Get() *GetFile200Response {
	return v.value
}

func (v *NullableGetFile200Response) Set(val *GetFile200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetFile200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetFile200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetFile200Response(val *GetFile200Response) *NullableGetFile200Response {
	return &NullableGetFile200Response{value: val, isSet: true}
}

func (v NullableGetFile200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetFile200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


