/*
kuucode

kuucode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AssistantMessageError - struct for AssistantMessageError
type AssistantMessageError struct {
	MessageAbortedError      *MessageAbortedError
	MessageOutputLengthError *MessageOutputLengthError
	ProviderAuthError        *ProviderAuthError
	UnknownError             *UnknownError
}

// MessageAbortedErrorAsAssistantMessageError is a convenience function that returns MessageAbortedError wrapped in AssistantMessageError
func MessageAbortedErrorAsAssistantMessageError(v *MessageAbortedError) AssistantMessageError {
	return AssistantMessageError{
		MessageAbortedError: v,
	}
}

// MessageOutputLengthErrorAsAssistantMessageError is a convenience function that returns MessageOutputLengthError wrapped in AssistantMessageError
func MessageOutputLengthErrorAsAssistantMessageError(v *MessageOutputLengthError) AssistantMessageError {
	return AssistantMessageError{
		MessageOutputLengthError: v,
	}
}

// ProviderAuthErrorAsAssistantMessageError is a convenience function that returns ProviderAuthError wrapped in AssistantMessageError
func ProviderAuthErrorAsAssistantMessageError(v *ProviderAuthError) AssistantMessageError {
	return AssistantMessageError{
		ProviderAuthError: v,
	}
}

// UnknownErrorAsAssistantMessageError is a convenience function that returns UnknownError wrapped in AssistantMessageError
func UnknownErrorAsAssistantMessageError(v *UnknownError) AssistantMessageError {
	return AssistantMessageError{
		UnknownError: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *AssistantMessageError) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MessageAbortedError
	err = newStrictDecoder(data).Decode(&dst.MessageAbortedError)
	if err == nil {
		jsonMessageAbortedError, _ := json.Marshal(dst.MessageAbortedError)
		if string(jsonMessageAbortedError) == "{}" { // empty struct
			dst.MessageAbortedError = nil
		} else {
			if err = validator.Validate(dst.MessageAbortedError); err != nil {
				dst.MessageAbortedError = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageAbortedError = nil
	}

	// try to unmarshal data into MessageOutputLengthError
	err = newStrictDecoder(data).Decode(&dst.MessageOutputLengthError)
	if err == nil {
		jsonMessageOutputLengthError, _ := json.Marshal(dst.MessageOutputLengthError)
		if string(jsonMessageOutputLengthError) == "{}" { // empty struct
			dst.MessageOutputLengthError = nil
		} else {
			if err = validator.Validate(dst.MessageOutputLengthError); err != nil {
				dst.MessageOutputLengthError = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageOutputLengthError = nil
	}

	// try to unmarshal data into ProviderAuthError
	err = newStrictDecoder(data).Decode(&dst.ProviderAuthError)
	if err == nil {
		jsonProviderAuthError, _ := json.Marshal(dst.ProviderAuthError)
		if string(jsonProviderAuthError) == "{}" { // empty struct
			dst.ProviderAuthError = nil
		} else {
			if err = validator.Validate(dst.ProviderAuthError); err != nil {
				dst.ProviderAuthError = nil
			} else {
				match++
			}
		}
	} else {
		dst.ProviderAuthError = nil
	}

	// try to unmarshal data into UnknownError
	err = newStrictDecoder(data).Decode(&dst.UnknownError)
	if err == nil {
		jsonUnknownError, _ := json.Marshal(dst.UnknownError)
		if string(jsonUnknownError) == "{}" { // empty struct
			dst.UnknownError = nil
		} else {
			if err = validator.Validate(dst.UnknownError); err != nil {
				dst.UnknownError = nil
			} else {
				match++
			}
		}
	} else {
		dst.UnknownError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MessageAbortedError = nil
		dst.MessageOutputLengthError = nil
		dst.ProviderAuthError = nil
		dst.UnknownError = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AssistantMessageError)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AssistantMessageError)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AssistantMessageError) MarshalJSON() ([]byte, error) {
	if src.MessageAbortedError != nil {
		return json.Marshal(&src.MessageAbortedError)
	}

	if src.MessageOutputLengthError != nil {
		return json.Marshal(&src.MessageOutputLengthError)
	}

	if src.ProviderAuthError != nil {
		return json.Marshal(&src.ProviderAuthError)
	}

	if src.UnknownError != nil {
		return json.Marshal(&src.UnknownError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AssistantMessageError) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.MessageAbortedError != nil {
		return obj.MessageAbortedError
	}

	if obj.MessageOutputLengthError != nil {
		return obj.MessageOutputLengthError
	}

	if obj.ProviderAuthError != nil {
		return obj.ProviderAuthError
	}

	if obj.UnknownError != nil {
		return obj.UnknownError
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AssistantMessageError) GetActualInstanceValue() interface{} {
	if obj.MessageAbortedError != nil {
		return *obj.MessageAbortedError
	}

	if obj.MessageOutputLengthError != nil {
		return *obj.MessageOutputLengthError
	}

	if obj.ProviderAuthError != nil {
		return *obj.ProviderAuthError
	}

	if obj.UnknownError != nil {
		return *obj.UnknownError
	}

	// all schemas are nil
	return nil
}

type NullableAssistantMessageError struct {
	value *AssistantMessageError
	isSet bool
}

func (v NullableAssistantMessageError) Get() *AssistantMessageError {
	return v.value
}

func (v *NullableAssistantMessageError) Set(val *AssistantMessageError) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantMessageError) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantMessageError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantMessageError(val *AssistantMessageError) *NullableAssistantMessageError {
	return &NullableAssistantMessageError{value: val, isSet: true}
}

func (v NullableAssistantMessageError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantMessageError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
