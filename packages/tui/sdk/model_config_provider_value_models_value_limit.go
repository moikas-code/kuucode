/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConfigProviderValueModelsValueLimit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigProviderValueModelsValueLimit{}

// ConfigProviderValueModelsValueLimit struct for ConfigProviderValueModelsValueLimit
type ConfigProviderValueModelsValueLimit struct {
	Context float32 `json:"context"`
	Output float32 `json:"output"`
}

type _ConfigProviderValueModelsValueLimit ConfigProviderValueModelsValueLimit

// NewConfigProviderValueModelsValueLimit instantiates a new ConfigProviderValueModelsValueLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigProviderValueModelsValueLimit(context float32, output float32) *ConfigProviderValueModelsValueLimit {
	this := ConfigProviderValueModelsValueLimit{}
	this.Context = context
	this.Output = output
	return &this
}

// NewConfigProviderValueModelsValueLimitWithDefaults instantiates a new ConfigProviderValueModelsValueLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigProviderValueModelsValueLimitWithDefaults() *ConfigProviderValueModelsValueLimit {
	this := ConfigProviderValueModelsValueLimit{}
	return &this
}

// GetContext returns the Context field value
func (o *ConfigProviderValueModelsValueLimit) GetContext() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *ConfigProviderValueModelsValueLimit) GetContextOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *ConfigProviderValueModelsValueLimit) SetContext(v float32) {
	o.Context = v
}

// GetOutput returns the Output field value
func (o *ConfigProviderValueModelsValueLimit) GetOutput() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Output
}

// GetOutputOk returns a tuple with the Output field value
// and a boolean to check if the value has been set.
func (o *ConfigProviderValueModelsValueLimit) GetOutputOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Output, true
}

// SetOutput sets field value
func (o *ConfigProviderValueModelsValueLimit) SetOutput(v float32) {
	o.Output = v
}

func (o ConfigProviderValueModelsValueLimit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigProviderValueModelsValueLimit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["context"] = o.Context
	toSerialize["output"] = o.Output
	return toSerialize, nil
}

func (o *ConfigProviderValueModelsValueLimit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"context",
		"output",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigProviderValueModelsValueLimit := _ConfigProviderValueModelsValueLimit{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigProviderValueModelsValueLimit)

	if err != nil {
		return err
	}

	*o = ConfigProviderValueModelsValueLimit(varConfigProviderValueModelsValueLimit)

	return err
}

type NullableConfigProviderValueModelsValueLimit struct {
	value *ConfigProviderValueModelsValueLimit
	isSet bool
}

func (v NullableConfigProviderValueModelsValueLimit) Get() *ConfigProviderValueModelsValueLimit {
	return v.value
}

func (v *NullableConfigProviderValueModelsValueLimit) Set(val *ConfigProviderValueModelsValueLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigProviderValueModelsValueLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigProviderValueModelsValueLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigProviderValueModelsValueLimit(val *ConfigProviderValueModelsValueLimit) *NullableConfigProviderValueModelsValueLimit {
	return &NullableConfigProviderValueModelsValueLimit{value: val, isSet: true}
}

func (v NullableConfigProviderValueModelsValueLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigProviderValueModelsValueLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


