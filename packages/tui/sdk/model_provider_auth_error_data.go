/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProviderAuthErrorData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProviderAuthErrorData{}

// ProviderAuthErrorData struct for ProviderAuthErrorData
type ProviderAuthErrorData struct {
	ProviderID string `json:"providerID"`
	Message string `json:"message"`
}

type _ProviderAuthErrorData ProviderAuthErrorData

// NewProviderAuthErrorData instantiates a new ProviderAuthErrorData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderAuthErrorData(providerID string, message string) *ProviderAuthErrorData {
	this := ProviderAuthErrorData{}
	this.ProviderID = providerID
	this.Message = message
	return &this
}

// NewProviderAuthErrorDataWithDefaults instantiates a new ProviderAuthErrorData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderAuthErrorDataWithDefaults() *ProviderAuthErrorData {
	this := ProviderAuthErrorData{}
	return &this
}

// GetProviderID returns the ProviderID field value
func (o *ProviderAuthErrorData) GetProviderID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderID
}

// GetProviderIDOk returns a tuple with the ProviderID field value
// and a boolean to check if the value has been set.
func (o *ProviderAuthErrorData) GetProviderIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderID, true
}

// SetProviderID sets field value
func (o *ProviderAuthErrorData) SetProviderID(v string) {
	o.ProviderID = v
}

// GetMessage returns the Message field value
func (o *ProviderAuthErrorData) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ProviderAuthErrorData) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ProviderAuthErrorData) SetMessage(v string) {
	o.Message = v
}

func (o ProviderAuthErrorData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderAuthErrorData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["providerID"] = o.ProviderID
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *ProviderAuthErrorData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"providerID",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProviderAuthErrorData := _ProviderAuthErrorData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProviderAuthErrorData)

	if err != nil {
		return err
	}

	*o = ProviderAuthErrorData(varProviderAuthErrorData)

	return err
}

type NullableProviderAuthErrorData struct {
	value *ProviderAuthErrorData
	isSet bool
}

func (v NullableProviderAuthErrorData) Get() *ProviderAuthErrorData {
	return v.value
}

func (v *NullableProviderAuthErrorData) Set(val *ProviderAuthErrorData) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderAuthErrorData) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderAuthErrorData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderAuthErrorData(val *ProviderAuthErrorData) *NullableProviderAuthErrorData {
	return &NullableProviderAuthErrorData{value: val, isSet: true}
}

func (v NullableProviderAuthErrorData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderAuthErrorData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


