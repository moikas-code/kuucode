/*
kuucode

kuucode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
)

// checks if the AppTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppTime{}

// AppTime struct for AppTime
type AppTime struct {
	Initialized *float32 `json:"initialized,omitempty"`
}

// NewAppTime instantiates a new AppTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppTime() *AppTime {
	this := AppTime{}
	return &this
}

// NewAppTimeWithDefaults instantiates a new AppTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppTimeWithDefaults() *AppTime {
	this := AppTime{}
	return &this
}

// GetInitialized returns the Initialized field value if set, zero value otherwise.
func (o *AppTime) GetInitialized() float32 {
	if o == nil || IsNil(o.Initialized) {
		var ret float32
		return ret
	}
	return *o.Initialized
}

// GetInitializedOk returns a tuple with the Initialized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppTime) GetInitializedOk() (*float32, bool) {
	if o == nil || IsNil(o.Initialized) {
		return nil, false
	}
	return o.Initialized, true
}

// HasInitialized returns a boolean if a field has been set.
func (o *AppTime) HasInitialized() bool {
	if o != nil && !IsNil(o.Initialized) {
		return true
	}

	return false
}

// SetInitialized gets a reference to the given float32 and assigns it to the Initialized field.
func (o *AppTime) SetInitialized(v float32) {
	o.Initialized = &v
}

func (o AppTime) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Initialized) {
		toSerialize["initialized"] = o.Initialized
	}
	return toSerialize, nil
}

type NullableAppTime struct {
	value *AppTime
	isSet bool
}

func (v NullableAppTime) Get() *AppTime {
	return v.value
}

func (v *NullableAppTime) Set(val *AppTime) {
	v.value = val
	v.isSet = true
}

func (v NullableAppTime) IsSet() bool {
	return v.isSet
}

func (v *NullableAppTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppTime(val *AppTime) *NullableAppTime {
	return &NullableAppTime{value: val, isSet: true}
}

func (v NullableAppTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
