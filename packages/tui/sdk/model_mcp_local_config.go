/*
kuucode

opencode api

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kuucode

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the McpLocalConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &McpLocalConfig{}

// McpLocalConfig struct for McpLocalConfig
type McpLocalConfig struct {
	// Type of MCP server connection
	Type string `json:"type"`
	// Command and arguments to run the MCP server
	Command []string `json:"command"`
	// Environment variables to set when running the MCP server
	Environment *map[string]string `json:"environment,omitempty"`
	// Enable or disable the MCP server on startup
	Enabled *bool `json:"enabled,omitempty"`
}

type _McpLocalConfig McpLocalConfig

// NewMcpLocalConfig instantiates a new McpLocalConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcpLocalConfig(type_ string, command []string) *McpLocalConfig {
	this := McpLocalConfig{}
	this.Type = type_
	this.Command = command
	return &this
}

// NewMcpLocalConfigWithDefaults instantiates a new McpLocalConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcpLocalConfigWithDefaults() *McpLocalConfig {
	this := McpLocalConfig{}
	return &this
}

// GetType returns the Type field value
func (o *McpLocalConfig) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *McpLocalConfig) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *McpLocalConfig) SetType(v string) {
	o.Type = v
}

// GetCommand returns the Command field value
func (o *McpLocalConfig) GetCommand() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *McpLocalConfig) GetCommandOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Command, true
}

// SetCommand sets field value
func (o *McpLocalConfig) SetCommand(v []string) {
	o.Command = v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *McpLocalConfig) GetEnvironment() map[string]string {
	if o == nil || IsNil(o.Environment) {
		var ret map[string]string
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McpLocalConfig) GetEnvironmentOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *McpLocalConfig) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given map[string]string and assigns it to the Environment field.
func (o *McpLocalConfig) SetEnvironment(v map[string]string) {
	o.Environment = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *McpLocalConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McpLocalConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *McpLocalConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *McpLocalConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o McpLocalConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o McpLocalConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["command"] = o.Command
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

func (o *McpLocalConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"command",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMcpLocalConfig := _McpLocalConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMcpLocalConfig)

	if err != nil {
		return err
	}

	*o = McpLocalConfig(varMcpLocalConfig)

	return err
}

type NullableMcpLocalConfig struct {
	value *McpLocalConfig
	isSet bool
}

func (v NullableMcpLocalConfig) Get() *McpLocalConfig {
	return v.value
}

func (v *NullableMcpLocalConfig) Set(val *McpLocalConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableMcpLocalConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableMcpLocalConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcpLocalConfig(val *McpLocalConfig) *NullableMcpLocalConfig {
	return &NullableMcpLocalConfig{value: val, isSet: true}
}

func (v NullableMcpLocalConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcpLocalConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


