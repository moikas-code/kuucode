{
  "project": {
    "name": "kuuzuki",
    "type": "typescript-monorepo",
    "description": "AI-powered terminal assistant - Community fork of OpenCode focused on npm distribution and terminal/CLI interface",
    "version": "0.1.0",
    "license": "MIT",
    "repository": "https://github.com/moikas-code/kuuzuki",
    "keywords": ["ai", "terminal", "cli", "assistant", "claude", "opencode-fork"]
  },
  "commands": {
    "install": "bun install",
    "dev": "bun dev",
    "devTui": "./run.sh dev tui",
    "devServer": "./run.sh dev server",
    "devWatch": "./dev.sh watch",
    "build": "./run.sh build all",
    "buildTui": "./run.sh build tui",
    "buildServer": "./run.sh build server",
    "test": "bun test",
    "testSingle": "bun test {testFile}",
    "typecheck": "bun run typecheck",
    "clean": "./run.sh clean",
    "check": "./run.sh check",
    "link": "./dev.sh link",
    "unlink": "./dev.sh unlink",
    "deploy": "sst deploy",
    "deployProd": "sst deploy --stage production",
    "generateSdks": "./scripts/generate-sdks.sh",
    "stainless": "./scripts/stainless"
  },
  "codeStyle": {
    "language": "typescript",
    "formatter": "prettier",
    "linter": "none",
    "importStyle": "relative-for-local",
    "quotes": "double",
    "semicolons": false,
    "printWidth": 120,
    "tabWidth": 2,
    "useTabs": false
  },
  "conventions": {
    "fileNaming": "kebab-case",
    "functionNaming": "camelCase",
    "variableNaming": "camelCase",
    "classNaming": "PascalCase",
    "testFilePattern": "**/*.test.ts",
    "componentPattern": "PascalCase",
    "namespacePattern": "PascalCase"
  },
  "tools": {
    "packageManager": "bun",
    "runtime": "bun",
    "bundler": "bun",
    "framework": "hono",
    "database": "none",
    "testingFramework": "bun:test",
    "typeChecker": "typescript",
    "buildTool": "custom-scripts",
    "deployment": "sst",
    "validation": "zod",
    "ai": "anthropic-claude"
  },
  "paths": {
    "root": ".",
    "src": "packages/kuuzuki/src",
    "tests": "packages/kuuzuki/test",
    "docs": "docs",
    "config": ".",
    "scripts": "scripts",
    "tui": "packages/tui",
    "web": "packages/web",
    "function": "packages/function",
    "infra": "infra",
    "kb": "kb"
  },
  "rules": [
    "Prefer single word variable/function names where possible",
    "Avoid try/catch where possible - prefer to let exceptions bubble up",
    "Avoid else statements where possible",
    "Do not make useless helper functions - inline functionality unless the function is reusable or composable",
    "Prefer Bun APIs over Node.js APIs",
    "Use relative imports for local modules, named imports preferred",
    "Use Zod schemas for validation, TypeScript interfaces for structure",
    "Use camelCase for variables/functions, PascalCase for classes/namespaces",
    "Use Result patterns for error handling, avoid throwing exceptions in tools",
    "Use namespace-based organization (e.g., Tool.define(), Session.create())",
    "DO NOT do unnecessary destructuring of variables",
    "DO NOT use else statements unless necessary",
    "DO NOT use try/catch if it can be avoided",
    "AVOID using any type",
    "AVOID let statements - prefer const",
    "Use as many Bun APIs as possible like Bun.file()",
    "Tools should implement Tool.Info interface with execute() method",
    "Pass sessionID in tool context, use App.provide() for dependency injection",
    "All inputs should be validated with Zod schemas",
    "Use Log.create({ service: 'name' }) pattern for logging",
    "Use Storage namespace for persistence",
    "Commands are registered using yargs with cmd() helper",
    "Tools use schema validation with Zod for parameters",
    "NEVER claim something is ready/working/complete without actually testing it",
    "Before saying 'ready': Run the full application end-to-end",
    "Before saying 'fixed': Reproduce the issue, apply fix, verify it works",
    "Before saying 'works': Execute actual commands and observe results",
    "Before saying 'complete': Test from a user's perspective",
    "Provide actual test output, not theoretical explanations",
    "Show real error messages and how they were resolved",
    "Create reproducible test scripts",
    "Document what was actually tested vs what remains untested",
    "Building trust requires accuracy, not appearing capable",
    "Always use moidvk tools when available for code analysis and formatting",
    "Always start with moidvk file analysis tools",
    "Always run appropriate language-specific code quality checks",
    "Always check for security vulnerabilities in dependencies",
    "Always format code using moidvk formatters before completion",
    "Always run production readiness checks before deployment",
    "Always use kb-mcp knowledge base for project context and memory",
    "Before starting any task: Use kb_read to check for relevant documentation",
    "During work: Use kb_search to find related information",
    "After completing tasks: Use kb_update to document what was done",
    "Never proceed with significant work without first consulting the knowledge base",
    "Always use 3 sub agents to complete complex tasks"
  ],
  "dependencies": {
    "critical": [
      "@modelcontextprotocol/sdk",
      "ai",
      "zod",
      "hono",
      "yargs",
      "chalk"
    ],
    "preferred": [
      "@clack/prompts",
      "turndown",
      "diff",
      "open",
      "remeda"
    ],
    "avoided": [
      "lodash",
      "moment",
      "request"
    ]
  },
  "mcp": {
    "servers": {
      "moidvk": {
        "command": "moidvk",
        "args": ["serve"],
        "description": "Code quality, formatting, and security analysis tools"
      },
      "sequential-thinking": {
        "command": "npx",
        "args": ["-y", "@modelcontextprotocol/server-sequential-thinking"],
        "description": "Complex problem solving and reasoning"
      },
      "kb-mcp": {
        "command": "kb",
        "args": ["serve", "--local"],
        "description": "Knowledge base for documentation and project memory"
      },
      "fork-parity": {
        "command": "fork-parity-mcp",
        "env": {
          "UPSTREAM_REMOTE_NAME": "upstream",
          "UPSTREAM_BRANCH": "dev",
          "LOCAL_BRANCH": "master"
        },
        "description": "Fork synchronization and parity checking"
      },
      "image-analysis": {
        "command": "mcp-image-server",
        "args": ["serve"],
        "env": {
          "NODE_ENV": "production"
        },
        "description": "Image analysis and processing"
      },
      "svg-generator": {
        "command": "mcp-svg-server",
        "args": ["serve"],
        "description": "SVG generation and manipulation"
      },
      "weather": {
        "command": "kuucode",
        "args": ["x", "@h1deya/mcp-server-weather"],
        "description": "Weather information service"
      }
    },
    "preferredTools": [
      "mcp__moidvk__check_code_practices",
      "mcp__moidvk__format_code",
      "mcp__moidvk__scan_security_vulnerabilities",
      "mcp__moidvk__check_production_readiness",
      "mcp__moidvk__intelligent_development_analysis",
      "mcp__kb_mcp__kb_read",
      "mcp__kb_mcp__kb_update",
      "mcp__kb_mcp__kb_search",
      "mcp__sequential_thinking__think"
    ]
  },
  "agent": {
    "preferredBuiltinTools": [
      "bash",
      "edit",
      "read",
      "write",
      "glob",
      "grep",
      "todowrite",
      "todoread",
      "task"
    ],
    "workflowPreferences": {
      "alwaysUseKnowledgeBase": true,
      "preferMcpTools": true,
      "requireTestingBeforeClaiming": true,
      "useSubAgentsForComplexTasks": true,
      "documentAllChanges": true
    },
    "architecture": {
      "mainEntry": "packages/kuuzuki/src/index.ts",
      "cliCommands": "packages/kuuzuki/src/cli/cmd/",
      "tools": "packages/kuuzuki/src/tool/",
      "server": "packages/kuuzuki/src/server/server.ts",
      "tuiEntry": "packages/tui/cmd/kuuzuki/main.go",
      "requestFlow": [
        "User input in TUI or CLI",
        "Request sent to server via HTTP",
        "Server processes with AI/tools",
        "Response streamed back to client",
        "Display in terminal interface"
      ]
    },
    "testingChecklist": [
      "TUI starts and responds correctly",
      "CLI commands execute properly",
      "Server mode handles requests",
      "AI integration works with API key",
      "NPM package installs correctly",
      "Build completes successfully",
      "No TypeScript/Go errors",
      "Tests pass"
    ]
  }
}