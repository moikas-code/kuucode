{
  "project": {
    "name": "kuuzuki",
    "description": "Community-driven fork of OpenCode - AI-powered terminal assistant",
    "type": "monorepo",
    "languages": [
      "typescript",
      "go",
      "javascript"
    ],
    "frameworks": [
      "bun",
      "node.js",
      "hono",
      "astro"
    ],
    "architecture": "multi-package",
    "repository": "https://github.com/moikas-code/kuuzuki",
    "license": "MIT",
    "version": "0.1.0"
  },
  "commands": {
    "build": "./run.sh build all",
    "buildTui": "./run.sh build tui",
    "buildServer": "./run.sh build server",
    "test": "bun test",
    "testSingle": "bun test {testFile}",
    "dev": "bun dev",
    "devTui": "./run.sh dev tui",
    "devServer": "./run.sh dev server",
    "devWatch": "./dev.sh watch",
    "lint": "bun run lint",
    "typecheck": "bun run typecheck",
    "clean": "./run.sh clean",
    "check": "./run.sh check",
    "link": "./dev.sh link",
    "unlink": "./dev.sh unlink",
    "publish": "bun run script/publish.ts",
    "publishDryRun": "bun run script/publish.ts --dry-run",
    "generateSdks": "./scripts/generate-sdks.sh"
  },
  "codeStyle": {
    "language": "typescript",
    "formatter": "prettier",
    "linter": "eslint",
    "importStyle": "relative",
    "quotes": "double",
    "semicolons": false,
    "printWidth": 120,
    "tabWidth": 2,
    "useTabs": false
  },
  "conventions": {
    "fileNaming": "camelCase",
    "functionNaming": "camelCase",
    "variableNaming": "camelCase",
    "classNaming": "PascalCase",
    "testFilePattern": "*.test.ts",
    "configFiles": [
      ".agentrc",
      "package.json",
      "tsconfig.json",
      "go.mod"
    ],
    "branchNaming": "feature/description, fix/description, hotfix/description",
    "commitStyle": "conventional"
  },
  "tools": {
    "packageManager": "bun",
    "runtime": "bun",
    "bundler": "bun",
    "framework": "hono",
    "database": null,
    "testingFramework": "bun:test",
    "typeChecker": "typescript",
    "linter": "eslint",
    "formatter": "prettier",
    "aiProviders": [
      "anthropic"
    ],
    "preferred": [
      "bash",
      "edit",
      "read",
      "write",
      "grep",
      "glob"
    ]
  },
  "paths": {
    "src": "packages/kuuzuki/src",
    "tests": "packages/kuuzuki/test",
    "docs": "docs",
    "config": ".",
    "scripts": "scripts",
    "binaries": "packages/kuuzuki/bin",
    "tui": "packages/tui",
    "web": "packages/web",
    "infra": "infra"
  },
  "git": {
    "commitMode": "always",
    "pushMode": "always",
    "configMode": "never",
    "preserveAuthor": true,
    "requireConfirmation": true,
    "maxCommitSize": 50,
    "allowedBranches": [
      "master",
      "develop",
      "feature/*",
      "fix/*",
      "hotfix/*"
    ]
  },
  "rules": {
    "critical": [
      {
        "id": "create-comprehensive-v010-implementation-plan-with-mdopz2cl",
        "text": "Create comprehensive v0.1.0 implementation plan with stability and improvement features",
        "category": "critical",
        "reason": "Planning major version release with focus on stability and user experience",
        "createdAt": "2025-07-29T15:56:35.109Z",
        "usageCount": 0,
        "analytics": {
          "timesApplied": 0,
          "timesIgnored": 0,
          "effectivenessScore": 0,
          "userFeedback": []
        },
        "documentationLinks": [],
        "tags": []
      },
      {
        "id": "implement-secure-api-key-management-system-with-ke-mdoq6tst",
        "text": "Implement secure API key management system with keychain storage and provider validation",
        "category": "critical",
        "reason": "Creating secure infrastructure for managing API keys across multiple AI providers",
        "createdAt": "2025-07-29T16:02:37.277Z",
        "usageCount": 0,
        "analytics": {
          "timesApplied": 0,
          "timesIgnored": 0,
          "effectivenessScore": 0,
          "userFeedback": []
        },
        "documentationLinks": [],
        "tags": []
      }
    ],
    "preferred": [],
    "contextual": [],
    "deprecated": []
  },
  "dependencies": {
    "critical": [
      "@modelcontextprotocol/sdk",
      "hono",
      "yargs",
      "zod",
      "ai",
      "chalk",
      "@clack/prompts"
    ],
    "preferred": [
      "turndown",
      "diff",
      "open",
      "remeda",
      "gray-matter",
      "isomorphic-git"
    ],
    "avoided": [
      "express",
      "lodash",
      "moment"
    ]
  },
  "mcp": {
    "servers": {
      "moidvk": {
        "description": "Development tools and code analysis server",
        "tools": [
          "check_code_practices",
          "rust_code_practices",
          "python_code_analyzer",
          "format_code",
          "rust_formatter",
          "python_formatter",
          "scan_security_vulnerabilities",
          "check_safety_rules",
          "rust_safety_checker",
          "python_security_scanner",
          "check_production_readiness",
          "rust_production_readiness",
          "rust_performance_analyzer",
          "python_test_analyzer",
          "check_accessibility",
          "check_graphql_schema",
          "check_graphql_query",
          "check_redux_patterns",
          "intelligent_development_analysis",
          "semantic_development_search",
          "development_session_manager",
          "js_test_analyzer",
          "bundle_size_analyzer",
          "container_security_scanner",
          "documentation_quality_checker",
          "openapi_rest_validator",
          "js_performance_analyzer",
          "python_performance_analyzer",
          "cicd_configuration_analyzer",
          "license_compliance_scanner",
          "environment_config_validator"
        ]
      },
      "kb-mcp": {
        "description": "Knowledge base and documentation management",
        "tools": [
          "kb_read",
          "kb_update",
          "kb_search",
          "kb_semantic_search",
          "kb_graph_query",
          "kb_status",
          "kb_issues"
        ]
      },
      "sequential-thinking": {
        "description": "Complex problem solving and analysis",
        "tools": [
          "sequential_thinking"
        ]
      },
      "memory": {
        "description": "Context preservation across sessions",
        "tools": [
          "memory_store",
          "memory_retrieve"
        ]
      }
    },
    "workflow": [
      "ALWAYS start with moidvk file analysis tools",
      "ALWAYS run appropriate language-specific code quality checks",
      "ALWAYS check for security vulnerabilities in dependencies",
      "ALWAYS format code using moidvk formatters before completion",
      "ALWAYS run production readiness checks before deployment",
      "ALWAYS use moidvk secure tools for bash and grep operations",
      "ALWAYS leverage intelligent development analysis for complex tasks",
      "ALWAYS maintain session continuity with development session manager",
      "ALWAYS use kb-mcp knowledge base for project context and memory",
      "Before starting any task: Use kb_read to check for relevant documentation",
      "During work: Use kb_search to find related information",
      "After completing tasks: Use kb_update to document what was done",
      "For complex analysis: Use kb_semantic_search and kb_graph_query"
    ]
  },
  "agent": {
    "preferredTools": [
      "bash",
      "edit",
      "read",
      "write",
      "grep",
      "glob",
      "todowrite",
      "todoread",
      "task",
      "memory"
    ],
    "taskExecution": "always use 3 sub agents to complete tasks",
    "securityLevel": "DEVELOPMENT for coding, STRICT for production",
    "privacyMode": true,
    "contextPreservation": true
  },
  "security": {
    "sensitiveFiles": [
      ".env",
      ".env.*",
      "*.key",
      "*.pem",
      "auth.json",
      "*.secret"
    ],
    "allowedDomains": [
      "api.anthropic.com",
      "api.openai.com",
      "github.com",
      "registry.npmjs.org"
    ],
    "requireApproval": [
      "credential_operations",
      "external_api_calls",
      "file_deletions",
      "git_config_changes"
    ]
  },
  "documentation": {
    "readme": "README.md",
    "contributing": "CONTRIBUTING.md",
    "changelog": "CHANGELOG.md",
    "docs_dir": "docs/",
    "api_docs": "docs/openapi.json",
    "agents": "docs/AGENTS.md",
    "claude": "CLAUDE.md"
  },
  "deployment": {
    "npm_package": "kuuzuki",
    "platforms": [
      "linux",
      "macos",
      "windows"
    ],
    "ci_cd": "github_actions",
    "publish_command": "bun run script/publish.ts",
    "binaries": {
      "opencode": "./bin/kuuzuki",
      "kuuzuki": "./bin/kuuzuki"
    }
  },
  "ruleMetadata": {
    "version": "1.0.0",
    "lastModified": "2025-07-29T16:08:47.350Z",
    "totalRules": 2,
    "sessionRules": [
      {
        "ruleId": "create-comprehensive-v010-implementation-plan-with-mdopz2cl",
        "learnedAt": "2025-07-29T15:56:35.109Z",
        "context": "Planning major version release with focus on stability and user experience"
      },
      {
        "ruleId": "implement-secure-api-key-management-system-with-ke-mdoq6tst",
        "learnedAt": "2025-07-29T16:02:37.277Z",
        "context": "Creating secure infrastructure for managing API keys across multiple AI providers"
      }
    ]
  }
}