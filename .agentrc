{
  "project": {
    "name": "kuuzuki",
    "description": "Community-driven fork of OpenCode - AI-powered terminal assistant",
    "type": "monorepo",
    "languages": ["typescript", "go", "javascript"],
    "frameworks": ["bun", "node.js", "hono", "astro"],
    "architecture": "multi-package",
    "repository": "https://github.com/moikas-code/kuuzuki",
    "license": "MIT",
    "version": "0.1.0"
  },
  "commands": {
    "build": "./run.sh build all",
    "buildTui": "./run.sh build tui",
    "buildServer": "./run.sh build server",
    "test": "bun test",
    "testSingle": "bun test {testFile}",
    "dev": "bun dev",
    "devTui": "./run.sh dev tui",
    "devServer": "./run.sh dev server",
    "devWatch": "./dev.sh watch",
    "lint": "bun run lint",
    "typecheck": "bun run typecheck",
    "clean": "./run.sh clean",
    "check": "./run.sh check",
    "link": "./dev.sh link",
    "unlink": "./dev.sh unlink",
    "publish": "bun run script/publish.ts",
    "publishDryRun": "bun run script/publish.ts --dry-run",
    "generateSdks": "./scripts/generate-sdks.sh"
  },
  "codeStyle": {
    "language": "typescript",
    "formatter": "prettier",
    "linter": "eslint",
    "importStyle": "relative",
    "quotes": "double",
    "semicolons": false,
    "printWidth": 120,
    "tabWidth": 2,
    "useTabs": false
  },
  "conventions": {
    "fileNaming": "camelCase",
    "functionNaming": "camelCase",
    "variableNaming": "camelCase",
    "classNaming": "PascalCase",
    "testFilePattern": "*.test.ts",
    "configFiles": [".agentrc", "package.json", "tsconfig.json", "go.mod"],
    "branchNaming": "feature/description, fix/description, hotfix/description",
    "commitStyle": "conventional"
  },
  "tools": {
    "packageManager": "bun",
    "runtime": "bun",
    "bundler": "bun",
    "framework": "hono",
    "database": null,
    "testingFramework": "bun:test",
    "typeChecker": "typescript",
    "linter": "eslint",
    "formatter": "prettier",
    "aiProviders": ["anthropic"],
    "preferred": ["bash", "edit", "read", "write", "grep", "glob"]
  },
  "paths": {
    "src": "packages/kuuzuki/src",
    "tests": "packages/kuuzuki/test",
    "docs": "docs",
    "config": ".",
    "scripts": "scripts",
    "binaries": "packages/kuuzuki/bin",
    "tui": "packages/tui",
    "web": "packages/web",
    "infra": "infra"
  },
  "git": {
    "commitMode": "always",
    "pushMode": "always", 
    "configMode": "never",
    "preserveAuthor": true,
    "requireConfirmation": true,
    "maxCommitSize": 50,
    "allowedBranches": ["master", "develop", "feature/*", "fix/*", "hotfix/*"]
  },
  "rules": [
    "Always run tests before committing changes",
    "Use TypeScript for type safety in JavaScript code",
    "Follow conventional commit message format",
    "Update documentation when adding new features",
    "Ensure cross-platform compatibility for all binaries",
    "Never commit sensitive information like API keys",
    "Use isolated test directories to avoid interfering with project files",
    "Maintain backward compatibility with OpenCode where possible",
    "Focus on terminal/CLI experience as primary interface",
    "Enable community contributions through clear plugin architecture",
    "Prefer single word variable/function names",
    "Avoid try catch where possible - prefer to let exceptions bubble up",
    "Avoid else statements where possible",
    "Do not make useless helper functions - inline functionality unless the function is reusable or composable",
    "Prefer Bun APIs over Node.js APIs",
    "Use relative imports for local modules, named imports preferred",
    "Use Zod schemas for validation, TypeScript interfaces for structure",
    "Use camelCase for variables/functions, PascalCase for classes/namespaces",
    "Use Result patterns, avoid throwing exceptions in tools",
    "Use namespace-based organization (e.g., Tool.define(), Session.create())",
    "Try to keep things in one function unless composable or reusable",
    "DO NOT do unnecessary destructuring of variables",
    "DO NOT use else statements unless necessary",
    "DO NOT use try/catch if it can be avoided",
    "AVOID using any type",
    "AVOID let statements",
    "PREFER single word variable names where possible",
    "Use as many bun apis as possible like Bun.file()",
    "Implement Tool.Info interface with execute() method",
    "Pass sessionID in tool context, use App.provide() for DI",
    "All inputs validated with Zod schemas",
    "Use Log.create({ service: 'name' }) pattern",
    "Use Storage namespace for persistence",
    "Go TUI communicates with TypeScript server via stainless SDK",
    "When adding/modifying server endpoints, ask user to generate new client SDK",
    "NEVER claim something is ready, working, or complete without testing",
    "Actually run the software before claiming it works",
    "Test all claimed features and verify integration between components",
    "Check error cases before claiming completion",
    "Provide actual test output, not theoretical explanations",
    "Show real error messages and how they were resolved",
    "Create reproducible test scripts",
    "Document what was actually tested vs what remains untested",
    "Say 'I've implemented this but haven't tested it yet' when appropriate",
    "Say 'This should work but needs verification' when uncertain",
    "Say 'I can't test this directly, we need to verify together' when limited",
    "Building trust requires accuracy, not appearing capable"
  ],
  "dependencies": {
    "critical": [
      "@modelcontextprotocol/sdk",
      "hono",
      "yargs",
      "zod",
      "ai",
      "chalk",
      "@clack/prompts"
    ],
    "preferred": [
      "turndown",
      "diff",
      "open",
      "remeda",
      "gray-matter",
      "isomorphic-git"
    ],
    "avoided": [
      "express",
      "lodash",
      "moment"
    ]
  },
  "mcp": {
    "servers": {
      "moidvk": {
        "description": "Development tools and code analysis server",
        "tools": [
          "check_code_practices",
          "rust_code_practices", 
          "python_code_analyzer",
          "format_code",
          "rust_formatter",
          "python_formatter",
          "scan_security_vulnerabilities",
          "check_safety_rules",
          "rust_safety_checker",
          "python_security_scanner",
          "check_production_readiness",
          "rust_production_readiness",
          "rust_performance_analyzer",
          "python_test_analyzer",
          "check_accessibility",
          "check_graphql_schema",
          "check_graphql_query",
          "check_redux_patterns",
          "intelligent_development_analysis",
          "semantic_development_search",
          "development_session_manager",
          "js_test_analyzer",
          "bundle_size_analyzer",
          "container_security_scanner",
          "documentation_quality_checker",
          "openapi_rest_validator",
          "js_performance_analyzer",
          "python_performance_analyzer",
          "cicd_configuration_analyzer",
          "license_compliance_scanner",
          "environment_config_validator"
        ]
      },
      "kb-mcp": {
        "description": "Knowledge base and documentation management",
        "tools": [
          "kb_read",
          "kb_update", 
          "kb_search",
          "kb_semantic_search",
          "kb_graph_query",
          "kb_status",
          "kb_issues"
        ]
      },
      "sequential-thinking": {
        "description": "Complex problem solving and analysis",
        "tools": [
          "sequential_thinking"
        ]
      },
      "memory": {
        "description": "Context preservation across sessions",
        "tools": [
          "memory_store",
          "memory_retrieve"
        ]
      }
    },
    "workflow": [
      "ALWAYS start with moidvk file analysis tools",
      "ALWAYS run appropriate language-specific code quality checks",
      "ALWAYS check for security vulnerabilities in dependencies",
      "ALWAYS format code using moidvk formatters before completion",
      "ALWAYS run production readiness checks before deployment",
      "ALWAYS use moidvk secure tools for bash and grep operations",
      "ALWAYS leverage intelligent development analysis for complex tasks",
      "ALWAYS maintain session continuity with development session manager",
      "ALWAYS use kb-mcp knowledge base for project context and memory",
      "Before starting any task: Use kb_read to check for relevant documentation",
      "During work: Use kb_search to find related information",
      "After completing tasks: Use kb_update to document what was done",
      "For complex analysis: Use kb_semantic_search and kb_graph_query"
    ]
  },
  "agent": {
    "preferredTools": [
      "bash",
      "edit", 
      "read",
      "write",
      "grep",
      "glob",
      "todowrite",
      "todoread",
      "task",
      "memory"
    ],
    "taskExecution": "always use 3 sub agents to complete tasks",
    "securityLevel": "DEVELOPMENT for coding, STRICT for production",
    "privacyMode": true,
    "contextPreservation": true
  },
  "security": {
    "sensitiveFiles": [".env", ".env.*", "*.key", "*.pem", "auth.json", "*.secret"],
    "allowedDomains": ["api.anthropic.com", "api.openai.com", "github.com", "registry.npmjs.org"],
    "requireApproval": ["credential_operations", "external_api_calls", "file_deletions", "git_config_changes"]
  },
  "documentation": {
    "readme": "README.md",
    "contributing": "CONTRIBUTING.md", 
    "changelog": "CHANGELOG.md",
    "docs_dir": "docs/",
    "api_docs": "docs/openapi.json",
    "agents": "docs/AGENTS.md",
    "claude": "CLAUDE.md"
  },
  "deployment": {
    "npm_package": "kuuzuki",
    "platforms": ["linux", "macos", "windows"],
    "ci_cd": "github_actions",
    "publish_command": "bun run script/publish.ts",
    "binaries": {
      "opencode": "./bin/kuuzuki",
      "kuuzuki": "./bin/kuuzuki"
    }
  }
}