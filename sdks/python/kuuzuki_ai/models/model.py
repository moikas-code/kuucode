# coding: utf-8

"""
    kuuzuki

    kuuzuki API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kuuzuki_ai.models.model_cost import ModelCost
from kuuzuki_ai.models.model_limit import ModelLimit
from typing import Optional, Set
from typing_extensions import Self

class Model(BaseModel):
    """
    Model
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    release_date: Optional[StrictStr] = None
    attachment: Optional[StrictBool] = None
    reasoning: Optional[StrictBool] = None
    temperature: Optional[StrictBool] = None
    tool_call: Optional[StrictBool] = None
    cost: Optional[ModelCost] = None
    limit: Optional[ModelLimit] = None
    options: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "release_date", "attachment", "reasoning", "temperature", "tool_call", "cost", "limit", "options"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Model from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cost
        if self.cost:
            _dict['cost'] = self.cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of limit
        if self.limit:
            _dict['limit'] = self.limit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Model from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "release_date": obj.get("release_date"),
            "attachment": obj.get("attachment"),
            "reasoning": obj.get("reasoning"),
            "temperature": obj.get("temperature"),
            "tool_call": obj.get("tool_call"),
            "cost": ModelCost.from_dict(obj["cost"]) if obj.get("cost") is not None else None,
            "limit": ModelLimit.from_dict(obj["limit"]) if obj.get("limit") is not None else None,
            "options": obj.get("options")
        })
        return _obj
