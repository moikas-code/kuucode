/* tslint:disable */
/* eslint-disable */
/**
 * kuuzuki
 * kuuzuki API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ModelCost } from './ModelCost';
import {
    ModelCostFromJSON,
    ModelCostFromJSONTyped,
    ModelCostToJSON,
    ModelCostToJSONTyped,
} from './ModelCost';
import type { ModelLimit } from './ModelLimit';
import {
    ModelLimitFromJSON,
    ModelLimitFromJSONTyped,
    ModelLimitToJSON,
    ModelLimitToJSONTyped,
} from './ModelLimit';

/**
 *
 * @export
 * @interface Model
 */
export interface Model {
    /**
     *
     * @type {string}
     * @memberof Model
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Model
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Model
     */
    releaseDate?: string;
    /**
     *
     * @type {boolean}
     * @memberof Model
     */
    attachment?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Model
     */
    reasoning?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Model
     */
    temperature?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Model
     */
    toolCall?: boolean;
    /**
     *
     * @type {ModelCost}
     * @memberof Model
     */
    cost?: ModelCost;
    /**
     *
     * @type {ModelLimit}
     * @memberof Model
     */
    limit?: ModelLimit;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof Model
     */
    options?: { [key: string]: any; };
}

/**
 * Check if a given object implements the Model interface.
 */
export function instanceOfModel(value: object): value is Model {
    return true;
}

export function ModelFromJSON(json: any): Model {
    return ModelFromJSONTyped(json, false);
}

export function ModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): Model {
    if (json == null) {
        return json;
    }
    return {

        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'releaseDate': json['release_date'] == null ? undefined : json['release_date'],
        'attachment': json['attachment'] == null ? undefined : json['attachment'],
        'reasoning': json['reasoning'] == null ? undefined : json['reasoning'],
        'temperature': json['temperature'] == null ? undefined : json['temperature'],
        'toolCall': json['tool_call'] == null ? undefined : json['tool_call'],
        'cost': json['cost'] == null ? undefined : ModelCostFromJSON(json['cost']),
        'limit': json['limit'] == null ? undefined : ModelLimitFromJSON(json['limit']),
        'options': json['options'] == null ? undefined : json['options'],
    };
}

export function ModelToJSON(json: any): Model {
    return ModelToJSONTyped(json, false);
}

export function ModelToJSONTyped(value?: Model | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {

        'id': value['id'],
        'name': value['name'],
        'release_date': value['releaseDate'],
        'attachment': value['attachment'],
        'reasoning': value['reasoning'],
        'temperature': value['temperature'],
        'tool_call': value['toolCall'],
        'cost': ModelCostToJSON(value['cost']),
        'limit': ModelLimitToJSON(value['limit']),
        'options': value['options'],
    };
}
