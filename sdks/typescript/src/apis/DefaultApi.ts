/* tslint:disable */
/* eslint-disable */
/**
 * kuuzuki
 * kuuzuki API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  App,
  AppProvidersResponse,
  CreateSessionRequest,
  SendMessageRequest,
  Session,
} from '../models/index';
import {
    AppFromJSON,
    AppToJSON,
    AppProvidersResponseFromJSON,
    AppProvidersResponseToJSON,
    CreateSessionRequestFromJSON,
    CreateSessionRequestToJSON,
    SendMessageRequestFromJSON,
    SendMessageRequestToJSON,
    SessionFromJSON,
    SessionToJSON,
} from '../models/index';

export interface CreateSessionOperationRequest {
    createSessionRequest: CreateSessionRequest;
}

export interface SendMessageOperationRequest {
    id: string;
    sendMessageRequest: SendMessageRequest;
}

/**
 * DefaultApi - interface
 *
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     *
     * @summary Create a new session
     * @param {CreateSessionRequest} createSessionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createSessionRaw(requestParameters: CreateSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Session>>;

    /**
     * Create a new session
     */
    createSession(requestParameters: CreateSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Session>;

    /**
     *
     * @summary Get application info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAppRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<App>>;

    /**
     * Get application info
     */
    getApp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<App>;

    /**
     *
     * @summary List all providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getConfigProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppProvidersResponse>>;

    /**
     * List all providers
     */
    getConfigProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppProvidersResponse>;

    /**
     *
     * @summary Send a message to a session
     * @param {string} id
     * @param {SendMessageRequest} sendMessageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sendMessageRaw(requestParameters: SendMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Send a message to a session
     */
    sendMessage(requestParameters: SendMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     * Create a new session
     */
    async createSessionRaw(requestParameters: CreateSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Session>> {
        if (requestParameters['createSessionRequest'] == null) {
            throw new runtime.RequiredError(
                'createSessionRequest',
                'Required parameter "createSessionRequest" was null or undefined when calling createSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/session`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSessionRequestToJSON(requestParameters['createSessionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
    }

    /**
     * Create a new session
     */
    async createSession(requestParameters: CreateSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Session> {
        const response = await this.createSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get application info
     */
    async getAppRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<App>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/app`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppFromJSON(jsonValue));
    }

    /**
     * Get application info
     */
    async getApp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<App> {
        const response = await this.getAppRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all providers
     */
    async getConfigProvidersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppProvidersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/config/providers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppProvidersResponseFromJSON(jsonValue));
    }

    /**
     * List all providers
     */
    async getConfigProviders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppProvidersResponse> {
        const response = await this.getConfigProvidersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Send a message to a session
     */
    async sendMessageRaw(requestParameters: SendMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling sendMessage().'
            );
        }

        if (requestParameters['sendMessageRequest'] == null) {
            throw new runtime.RequiredError(
                'sendMessageRequest',
                'Required parameter "sendMessageRequest" was null or undefined when calling sendMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/session/{id}/message`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageRequestToJSON(requestParameters['sendMessageRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Send a message to a session
     */
    async sendMessage(requestParameters: SendMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.sendMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
